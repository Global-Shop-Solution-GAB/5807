Program.Sub.Preflight.Start
Program.External.Include.Library("GCG_5807_ORDUPL.lib")
Program.External.Include.Library("GCG_5807_SharedFunctions.lib")
Program.External.Include.Library("910050.lib")

V.Global.iUploaded.Declare(Long, 0)
V.Global.iUpdated.Declare(Long, 0)
V.Global.iFailed.Declare(Long, 0)
V.Global.iDeleted.Declare(Long, 0)
V.Global.iCustomersUploaded.Declare(Long, 0)
V.Global.iCustomersFailed.Declare(Long, 0)
V.Global.sCallingProgram.Declare(String, "")

'debug variables
V.Global.bSQLLogging.Declare(Boolean, False)
V.Global.bExtendedLogging.Declare(Boolean, False)
V.Global.bGABLogging.Declare(Boolean, False)
V.Global.bCallWrapperLogging.Declare(Boolean, False)
V.Global.bDebugger.Declare(Boolean, False)
V.Global.bDataBackups.Declare(Boolean, False)
V.Global.bUploadBackups.Declare(Boolean, False)
V.Global.bPollingLogging.Declare(Boolean, False)
V.Global.bPostUploadLogging.Declare(Boolean, False)

V.Global.sConfiguratorScript.Declare(String, "GCG_5807_ConfiguratorUploader.g2p")
V.Global.sCustomerUploaderScript.Declare(String, "GCG_5807_CustomerUploader.g2u")
V.Global.sContactUploaderScript.Declare(String, "GCG_5807_ContactUploader.g2u")
V.Global.sDPIBomLocationScript.Declare(String, "GCG_5807_SetOrderBOMLocationsDPI.g2u")
V.Global.sOrderFromQuoteJRMScript.Declare(String, "GCG_5807_OrderFromQuoteJRM.g2u")

'options
V.Global.sCallback.Declare(String, "Exit")
V.Global.sProject.Declare(String, "5807")
V.Global.sProjectTitle.Declare(String, "Standardized E-Commerce/CRM/Quoting Integration - Order Uploader")
V.Global.bUnattended.Declare(Boolean, True)

'flags
V.Global.bClearLock.Declare(Boolean, True)
V.Global.bWaitMessage.Declare(Boolean, False)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_5807_OrderUploader.g2u
'Trey S
'December 17th, 2019
'For several customers: Just Rite Manufacturing, IR Tools
'This program is intended to be the standard
'soap order uploader
'it reads from the staging table GCG_5807_ORDER_STAGE

F.Intrinsic.Control.Try

V.Local.bWebImporterLicense.Declare(Boolean)
V.Local.sMessage.Declare(String)

F.Intrinsic.Control.If(V.Passed.CALLING_PROGRAM.Trim, !=, "")
	V.Global.sCallingProgram.Set(V.Passed.CALLING_PROGRAM.Trim)
F.Intrinsic.Control.Else
	V.Global.sCallingProgram.Set(V.Caller.Caller)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.sCallingProgram.Trim, =, "GCG_5807_ReviewDashboard.g2u")
	V.Global.bUnattended.Set(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(SetLibraryLoggingVariables, "Project", V.Global.sProject, "ProjectTitle", V.Global.sProjectTitle, "CallBack", V.Global.sCallback, "Unattended", V.Global.bUnattended, "SQLLogging", V.Global.bSQLLogging)

F.Intrinsic.Control.If(V.Global.bDebugger)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bGABLogging)
	F.Intrinsic.Debug.EnableLogging
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bCallWrapperLogging)
	F.Intrinsic.Debug.CallWrapperDebugEnable
F.Intrinsic.Control.EndIf

'check if we are supposed to be running
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "ENABLED")
F.Intrinsic.Control.If(V.Args.SETTING.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.SETTING.Not)
		F.Intrinsic.Control.CallSub(Exit)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(Exit)
F.Intrinsic.Control.EndIf

V.Global.bWaitMessage.Set(True)
F.Intrinsic.UI.InvokeWaitDialog("Running Order Uploader...", "5807 Order Upload")
F.Intrinsic.Control.CallSub(DashboardPIDCheck)
F.Intrinsic.Control.CallSub(SaveLock)

'if we are supposed to be running, check for staged orders
F.Intrinsic.Control.CallSub(LoadFieldDataTable)
F.Intrinsic.Control.CallSub(LoadStagedOrders)
F.Data.DataTable.Close("dtFields")

F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount, >, 0)	
	
	'check if webimporter is licensed
	'F.Global.General.IsLicensed(71, V.Local.bWebImporterLicense)
	F.Global.General.IsLicensedByModuleName("WBI", V.Local.bWebImporterLicense)
	F.Intrinsic.Control.If(V.Local.bWebImporterLicense.Not)
		F.Intrinsic.Control.CallSub(AddLog, "Message", "Error: Order uploader could not be run because the Web Importer license is not activated.")
		F.Intrinsic.Control.CallSub(Exit)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.bDataBackups)
		F.Intrinsic.Control.CallSub(BackUpDataTable, "DataTable", "dtOrders", "Type", "Order", "Name", "StagedOrders", "DataView", "")
	F.Intrinsic.Control.EndIf

	F.Data.DataView.Create("dtOrders", "dvDistinct", 22)
	F.Data.DataView.ToDataTableDistinct("dtOrders", "dvDistinct", "dtAllOrders", "Order_No_External", True)
	F.Data.DataView.Close("dtOrders", "dvDistinct")
	F.Intrinsic.String.Build("{0} potential order(s)/quote(s) found to be uploaded/updated.", V.DataTable.dtAllOrders.RowCount, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Data.DataTable.Close("dtAllOrders")

	'if there are staged orders, check / prep them
	F.Intrinsic.Control.CallSub(PrepareStagedOrders)
	
	'upload any valid orders
	F.Data.DataView.Create("dtOrders", "dvValid", 22, "FAILED = False", "")
	F.Intrinsic.Control.If(V.DataView.dtOrders!dvValid.RowCount, >, 0)
		
		'change log for update/upload?
		F.Data.DataView.ToDataTableDistinct("dtOrders", "dvValid", "dtOrderNumbers", "Order_No_External", True)
		F.Intrinsic.String.Build("{0} valid order(s)/quote(s) found to be uploaded/updated.", V.DataTable.dtOrderNumbers.RowCount, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

		'if there are valid orders to upload, upload them
		F.Intrinsic.Control.CallSub(UploadStagedOrders)
	F.Intrinsic.Control.EndIf

	F.Data.DataView.Close("dtOrders", "dvValid")
	
	F.Intrinsic.Control.CallSub(LogFailedUploads)
	F.Intrinsic.Control.CallSub(SaveFeedBack)
	F.Intrinsic.Control.CallSub(PostProcessing)
	
	F.Intrinsic.String.Build("Order processing completed. {0} uploaded, {1} updated, {2} failed.", V.Global.iUploaded, V.Global.iUpdated, V.Global.iFailed, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

'close
F.Intrinsic.Control.CallSub(Exit)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.DashboardPIDCheck.Start
'this is for when the program is launched from the dashboard
'check and make sure the process is not already running, then run
'also, if the process is running from the dashboard, and this is launched from the server, just quit
'ACTUALLY this will only work if it's on the same machine.... need to figure out a better way

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sCallingProgram.Declare(String)
V.Local.iPID.Declare(Long)
V.Local.bRunning.Declare(Boolean)
V.Local.sMessage.Declare(String)
V.Local.sData.Declare(String)
V.Local.sUser.Declare(String)
V.Local.sMachine.Declare(String)
V.Local.sTime.Declare(String)
V.Local.sWindowsUser.Declare(String)
V.Local.sProgram.Declare(String)

'check if lock exists
F.Global.Registry.ReadValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, 1, -1, V.Local.iPID)

F.Intrinsic.Control.If(V.Local.iPID, !=, -1)
	F.Global.Registry.ReadValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, 5, "", V.Local.sProgram)
	F.Intrinsic.Control.If(V.Local.sProgram.Trim, =, "GABCE.EXE")
		F.Intrinsic.Control.CallSub(AddLog, "Message", "Uploader lock found, but lock was from GABCE.EXE. Assuming testing, clearing lock and lanching...")
		F.Intrinsic.Control.CallSub(ClearLock)
	F.Intrinsic.Control.Else
		'if WE are called from the dashboard
		F.Intrinsic.Control.If(V.Global.sCallingProgram.Trim, =, "GCG_5807_ReviewDashboard.g2u")
			
			'check the calling program of the other instance
			'well actually we don't really need to check, it will either be the server uploader or another dashboard instance
			'either way we wait until the program is done, then we launch
			'maybe need some way for user to cancel?
			
			F.Global.Registry.ReadValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, 6, "", V.Local.sData)
			F.Intrinsic.String.Split(V.Local.sData, V.Ambient.NewLine, V.Local.sData)
			F.Intrinsic.String.Split(V.Local.sData(1), ": ", V.Local.sTime)
			F.Intrinsic.String.Split(V.Local.sData(2), ": ", V.Local.sUser)
			F.Intrinsic.String.Split(V.Local.sData(4), ": ", V.Local.sWindowsUser)
			F.Intrinsic.String.Split(V.Local.sData(5), ": ", V.Local.sMachine)
			F.Intrinsic.String.Build("Another instance of the order uploader is running for user {0} on machine {1} at time {2}. Waiting for completion...", V.Local.sUser(1), V.Local.sMachine(1), V.Local.sTime(1), V.Local.sMessage)
			F.Intrinsic.UI.ChangeWaitStatus(V.Local.sMessage)
			
			F.Intrinsic.Control.DoUntil(V.Local.iPID, =, -1)
				F.Intrinsic.UI.Sleep(1)
				F.Global.Registry.ReadValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, 1, -1, V.Local.iPID)
			F.Intrinsic.Control.Loop
			
		'if we are not called from the dashboard
		F.Intrinsic.Control.ElseIf(V.Global.sCallingProgram, =, "GABCE.EXE")
			'for testing purposes, clear lock and run
			F.Intrinsic.Control.CallSub(AddLog, "Message", "Uploader lock found, but program was launched from GABCE.EXE. Assuming testing, clearing lock and lanching...")
			F.Intrinsic.Control.CallSub(ClearLock)
			
		F.Intrinsic.Control.Else
			'exit, don't run on top of ourselves
			'HERE CHECK PID
			F.Global.Registry.ReadValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, 6, "", V.Local.sData)
			F.Intrinsic.String.Split(V.Local.sData, V.Ambient.NewLine, V.Local.sData)
			F.Intrinsic.String.Split(V.Local.sData(1), ": ", V.Local.sTime)
			F.Intrinsic.String.Split(V.Local.sData(2), ": ", V.Local.sUser)
			F.Intrinsic.String.Split(V.Local.sData(4), ": ", V.Local.sWindowsUser)
			F.Intrinsic.String.Split(V.Local.sData(5), ": ", V.Local.sMachine)
			
			F.Intrinsic.String.Build("Uploader is already running with PID [{0}] from script [GCG_5807_OrderUploader.g2u], GSS User [{1}], Windows User [{2}], Machine [{3}] since [{4}]. Exiting...", V.Local.iPID, V.Local.sUser(1).Trim, V.Local.sWindowsUser(1).Trim, V.Local.sMachine(1).Trim, V.Local.sTime(1).Trim, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
			F.Intrinsic.Control.If(V.Global.bUnattended.Not)
				F.Intrinsic.UI.Msgbox(V.Local.sMessage)
			F.Intrinsic.Control.EndIf
			
			V.Local.sData.Redim(0, 0)
			V.Local.sTime.Redim(0, 0)
			V.Local.sUser.Redim(0, 0)
			V.Local.sWindowsUser.Redim(0, 0)
			V.Local.sMachine.Redim(0, 0)
			
			V.Global.bClearLock.Set(False)
			F.Intrinsic.Control.CallSub(Exit)
		F.Intrinsic.Control.EndIf								
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.DashboardPIDCheck.End

Program.Sub.SaveLock.Start
F.Intrinsic.Control.Try

V.Local.sContents.Declare(String)

'create lock file contents
F.Intrinsic.String.Build("PID: {0}{1}Launch Time: {2}{1}GSS User: {3}{1}Terminal: {4}{1}Windows User: {5}{1}Machine: {6}{1}Hook: {7}{1}Caller: {8}{1}Script: {9}{1}Company Code: {10}", V.Ambient.PID, V.Ambient.NewLine, V.Ambient.Now, V.Caller.User, V.Caller.Terminal, V.System.UserName, V.System.ComputerName, V.Caller.Hook, V.Caller.Caller, V.Caller.ScriptFile, V.Caller.CompanyCode, V.Local.sContents)
F.Global.Registry.AddValue(-1, V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, False, V.Global.sCallingProgram, False, V.Ambient.PID, 0, V.Ambient.Date, V.Ambient.Now, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.SaveLock.End

Program.Sub.LoadFieldDataTable.Start
'load a datatable of fields for the order table
'this is used for building the query

F.Intrinsic.Control.Try

F.Data.DataTable.Create("dtFields", True)
F.Data.DataTable.AddColumn("dtFields", "FIELD_NAME", "String", "")
F.Data.DataTable.AddColumn("dtFields", "FIELD_TYPE", "String", "")
F.Data.DataTable.AddColumn("dtFields", "USE_DEFAULT", "Boolean", False)
F.Data.DataTable.AddColumn("dtFields", "DEFAULT", "String", "")
F.Data.DataTable.AddColumn("dtFields", "REPLACE_NEWLINE", "Boolean", False)
F.Data.DataTable.AddColumn("dtFields", "UPPERCASE", "Boolean", False)

F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Order_No_External", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "TransactionCode", "FIELD_TYPE", "String", "USE_DEFAULT", True, "DEFAULT", "'O'", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "GSS_CustomerNo", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Ext_CustomerNo", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderNumber", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderType", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True, "UPPERCASE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineNumber", "FIELD_TYPE", "Long")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineType", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True, "UPPERCASE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "GSS_PartNumber", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True, "UPPERCASE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Ext_PartNumber", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "QtyOrdered", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineUnitPrice", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderDiscPercentage", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PartLoc", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderDueDate", "FIELD_TYPE", "Date", "USE_DEFAULT", True, "DEFAULT", "CURDATE()")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderDate", "FIELD_TYPE", "Date", "USE_DEFAULT", True, "DEFAULT", "CURDATE()")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineOrderDate", "FIELD_TYPE", "Date", "USE_DEFAULT", True, "DEFAULT", "'1900-01-01'")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LinePromiseDate", "FIELD_TYPE", "Date", "USE_DEFAULT", True, "DEFAULT", "'1900-01-01'")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Freight", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField1Head", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField2Head", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField3Head", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField4Head", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField5Head", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipVia", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Carrier", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToID", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToIntlFlag", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToName", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAddress1", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAddress2", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAddress3", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToCity", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToState", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToZip", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToCountry", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAttention", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToContactName", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToContactEmail", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToContactPhone", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToIntlFlag", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToName", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAddress1", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAddress2", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAddress3", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAddress4", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAddress5", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToCity", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToState", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToZip", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToCountry", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BillToAttention", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderSort", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderSort2", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField1Line", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField2Line", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField3Line", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField4Line", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "UserField5Line", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "AddlCommentsHead", "FIELD_TYPE", "String")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "AddlCommentsLine", "FIELD_TYPE", "String")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "CustomerPO", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Processed", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Failed", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "FeedBack", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Prospect", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "OrderLocation", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineTaxes", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "SalesPersonCode", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "RecordID", "FIELD_TYPE", "Long")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "LineUnitCost", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PartDescription", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "RECORD_TIMESTAMP", "FIELD_TYPE", "Date")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "Terms", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "MarkShipment", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipHold", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PART_UM", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True, "UPPERCASE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "QUOTE_STATUS", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "COMMISSION_TYPE_CODE", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAddress4", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ShipToAddress5", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "GL_ACCOUNT", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "FREIGHT_GL_ACCOUNT", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "DISCOUNT", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "FOB_POINT", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "CUSTOMER_PART", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "DELETE_ORDER", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "CONFIGURATOR_PART", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PRODUCT_LINE", "FIELD_TYPE", "String", "UPPERCASE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "NO_OVERRIDE_FREIGHT", "FIELD_TYPE", "Boolean")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "BILLTOPHONE", "FIELD_TYPE", "String", "REPLACE_NEWLINE", True)
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "QUANTITY_TO_PURCHASE", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "ORDER_DISCOUNT", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PRODUCT_LINE_DISCOUNT", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PRICE_CLASS_DISCOUNT", "FIELD_TYPE", "Float")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "APPLY_DISCOUNT", "FIELD_TYPE", "String")
F.Data.DataTable.AddRow("dtFields", "FIELD_NAME", "PriceBeforeDiscount", "FIELD_TYPE", "Float")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.LoadFieldDataTable.End

Program.Sub.FixPhoneNumbers.Start
'remove extra characters from phone numbers

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long)
V.Local.sFix.Declare(String)

'stripping these causes issues with international orders
'F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
'	F.Intrinsic.String.StripCharacters(V.DataTable.dtOrders(V.Local.iCounter).ShipToContactPhone!FieldValTrim, V.Local.sFix)
'	F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "ShipToContactPhone", V.Local.sFix)
'	
'	F.Intrinsic.String.StripCharacters(V.DataTable.dtOrders(V.Local.iCounter).BillToPhone!FieldValTrim, V.Local.sFix)
'	F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "BillToPhone", V.Local.sFix)
'F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.FixPhoneNumbers.End

Program.Sub.LoadStagedOrders.Start
F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String, "")
V.Local.sSQL.Declare(String, "")
V.Local.iCounter.Declare(Long)
V.Local.sField.Declare(String, "")
V.Local.sFields.Declare(String, "")
V.Local.bExpression.Declare(Boolean, False)
V.Local.sTypes.Declare(String)
V.Local.bPBD.Declare(Boolean, False)

'check review option
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "REQUIRE_REVIEW")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sFilter.Set(" and APPROVED = 1")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'if running from dashboard, only upload dashboard orders
F.Intrinsic.Control.If(V.Global.sCallingProgram, =, "GCG_5807_ReviewDashboard.g2u")
	F.Intrinsic.String.Build("{0} and IsNull(FEEDBACK, '') = 'DASHBOARD-UPLOAD'", V.Local.sFilter, V.Local.sFilter)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0} and IsNull(FEEDBACK, '') <> 'DASHBOARD-UPLOAD'", V.Local.sFilter, V.Local.sFilter)
F.Intrinsic.Control.EndIf

'build query
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtFields.RowCount--, 1)
	V.Local.bExpression.Set(False)
	V.Local.sField.Set(V.DataTable.dtFields(V.Local.iCounter).FIELD_NAME!FieldValTrim)
	
	'if field is set to have a default value, set that
	F.Intrinsic.Control.If(V.DataTable.dtFields(V.Local.iCounter).USE_DEFAULT!FieldVal)
		V.Local.bExpression.Set(True)
		F.Intrinsic.String.Build("IsNull({0}, {1})", V.Local.sField, V.DataTable.dtFields(V.Local.iCounter).DEFAULT!FieldValTrim, V.Local.sField)
	F.Intrinsic.Control.EndIf
	
	'if field is set to not allow new lines, remove them
	F.Intrinsic.Control.If(V.DataTable.dtFields(V.Local.iCounter).REPLACE_NEWLINE!FieldVal)
		V.Local.bExpression.Set(True)
		F.Intrinsic.String.Build("REPLACE({0}, '{1}', '')", V.Local.sField, V.Ambient.NewLine, V.Local.sField)
		F.Intrinsic.String.Build("REPLACE({0}, '{1}', '')", V.Local.sField, V.ASCII.10, V.Local.sField)
		F.Intrinsic.String.Build("REPLACE({0}, '{1}', '')", V.Local.sField, V.ASCII.13, V.Local.sField)
	F.Intrinsic.Control.EndIf
	
	'right trim strings
	F.Intrinsic.Control.If(V.DataTable.dtFields(V.Local.iCounter).FIELD_TYPE!FieldValTrim, =, "String")
		V.Local.bExpression.Set(True)
		F.Intrinsic.String.Build("RTRIM({0})", V.Local.sField, V.Local.sField)
	F.Intrinsic.Control.EndIf
	
	'upper case
	F.Intrinsic.Control.If(V.DataTable.dtFields(V.Local.iCounter).UPPERCASE!FieldVal)
		V.Local.bExpression.Set(True)
		F.Intrinsic.String.Build("UPPER({0})", V.Local.sField, V.Local.sField)
	F.Intrinsic.Control.EndIf
	
	'if it's an expression, rename it
	F.Intrinsic.Control.If(V.Local.bExpression)
		F.Intrinsic.String.Build("{0} {1}", V.Local.sField, V.DataTable.dtFields(V.Local.iCounter).FIELD_NAME!FieldValTrim, V.Local.sField)
	F.Intrinsic.Control.EndIf
	
	'add to field list
	F.Intrinsic.Control.If(V.Local.sFields.Trim, =, "")
		V.Local.sFields.Set(V.Local.sField)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}, {1}", V.Local.sFields, V.Local.sField, V.Local.sFields)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.String.Build("select {0} from GCG_5807_ORDER_STAGE where PROCESSED = 0{1}", V.Local.sFields, V.Local.sFilter, V.Local.sSQL)
F.Intrinsic.Control.If(V.Global.bPollingLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking for new records...")
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Data.DataTable.CreateFromSQL("dtOrders", "Con", V.Local.sSQL, True)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

'now clean up unicode
F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount, >, 0)

	F.Data.DataView.Create("dtFields", "dvString", 22, "[FIELD_TYPE] = 'String'", "")
	F.Data.DataView.ToString("dtFields", "dvString", "FIELD_NAME", "***NODELIMITER***", "*!*", V.Local.sFields)
	F.Data.DataView.ToString("dtFields", "dvString", "FIELD_TYPE", "***NODELIMITER***", "*!*", V.Local.sTypes)
	F.Data.DataView.Close("dtFields", "dvString")
	
	F.Intrinsic.String.Build("RecordID*!*{0}", V.Local.sFields, V.Local.sFields)
	F.Intrinsic.String.Build("Long*!*{0}", V.Local.sTypes, V.Local.sTypes)
	F.Intrinsic.Control.CallSub(RemoveUnicodeFromDataTable, "Project", V.Global.sProject, "DataTable", "dtOrders", "Types", V.Local.sTypes, "Fields", V.Local.sFields, "Key", "RecordID")
F.Intrinsic.Control.EndIf

'extra columns
F.Data.DataTable.AddColumn("dtOrders", "LOG", "Boolean", True)
F.Data.DataTable.AddColumn("dtOrders", "CONFIGURED_PRICE", "Boolean", False)
F.Data.DataTable.AddColumn("dtOrders", "SET_LINE_NUMBER", "Long")
F.Data.DataTable.AddColumn("dtOrders", "ORDER_DISCOUNT_AMOUNT", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "PRICE_CLASS_DISCOUNT_AMOUNT", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "PRODUCT_LINE_DISCOUNT_AMOUNT", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "ORDER_DISCOUNT_AMOUNT_ORDER_TOTAL", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "FINAL_ORDER_STRING", "String", "")
F.Data.DataTable.AddColumn("dtOrders", "UPDATE_ORDER", "Boolean", False)
F.Data.DataTable.AddColumn("dtOrders", "DISCOUNT_PRICE", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "SERVICE_TYPE", "Long", 0)

'this is a setting mostly for justrite and virnig
'want to get rid of PriceBeforeDiscount but Virnig uses it
'And justrite is pushing bad values to it, so we can't keep it for them
'HIDDEN option IGNORE_PBD for this
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "HIDDEN", "NAME", "IGNORE_PBD")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bPBD.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'calculated values
F.Intrinsic.Control.If(V.Local.bPBD)
	F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_UNIT_PRICE", "Float", "LineUnitPrice")
F.Intrinsic.Control.Else
	F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_UNIT_PRICE", "Float", "IIF(IsNull(PriceBeforeDiscount, 0) = 0, LineUnitPrice, IIF([LineUnitPrice] = 0 and PriceBeforeDiscount <> 0, 0, IIF(PriceBeforeDiscount < LineUnitPrice, LineUnitPrice, PriceBeforeDiscount)))")
F.Intrinsic.Control.EndIf

F.Data.DataTable.AddExpressionColumn("dtOrders", "CURRENT_PRICE_TOTAL", "Float", "[DISCOUNT_PRICE] * [QtyOrdered]")
F.Data.DataTable.AddExpressionColumn("dtOrders", "PART_AND_LOCATION", "String", "Trim(IsNull([GSS_PartNumber], '')) + Trim(IsNull([PartLoc], ''))")
F.Data.DataTable.AddExpressionColumn("dtOrders", "LINE_DATE", "Date", "IIF(IsNull([LineOrderDate], '1900-01-01') = '1900-01-01', [OrderDate], [LineOrderDate])")
F.Data.DataTable.AddExpressionColumn("dtOrders", "LINE_PROMISE_DATE", "Date", "IIF(IsNull([LinePromiseDate], '1900-01-01') = '1900-01-01', [OrderDueDate], [LinePromiseDate])")
F.Data.DataTable.AddExpressionColumn("dtOrders", "SHIP_INTERNATIONAL_STRING", "String", "IIF([ShipToIntlFlag], 'Y', '')")
F.Data.DataTable.AddExpressionColumn("dtOrders", "BILL_INTERNATIONAL_STRING", "String", "IIF([BillToIntlFlag], 'Y', '')")
F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_CUSTOMER_NAME", "String", "IIF(Trim(IsNull([BillToName], '')) = '', [ShipToName], [BillToName])")
F.Data.DataTable.AddExpressionColumn("dtOrders", "CUSTOMER_PO_ENTERED", "Boolean", "IIF(Trim(IsNull([CustomerPO], '')) = '', False, True)")

F.Data.DataTable.AddExpressionColumn("dtOrders", "TOTAL_ORER_DISCOUNT_AMOUNT", "Float", "ORDER_DISCOUNT_AMOUNT * QTYORDERED")
F.Data.DataTable.AddExpressionColumn("dtOrders", "TOTAL_PRICE_CLASS_DISCOUNT_AMOUNT", "Float", "PRICE_CLASS_DISCOUNT_AMOUNT * QTYORDERED")
F.Data.DataTable.AddExpressionColumn("dtOrders", "TOTAL_PRODUCT_LINE_DISCOUNT_AMOUNT", "Float", "PRODUCT_LINE_DISCOUNT_AMOUNT * QTYORDERED")

F.Data.DataTable.AddExpressionColumn("dtOrders", "DISCOUNT_AMOUNT", Float, "[FINAL_UNIT_PRICE] - [DISCOUNT_PRICE]")
F.Data.DataTable.AddExpressionColumn("dtOrders", "ORIGINAL_EXTENSION", Float, "[FINAL_UNIT_PRICE] * [QtyOrdered]")
F.Data.DataTable.AddExpressionColumn("dtOrders", "DISCOUNT_AMOUNT_TOTAL", Float, "([ORIGINAL_EXTENSION] - [CURRENT_PRICE_TOTAL]) * -1")

F.Data.DataTable.AddExpressionColumn("dtOrders", "PRICE_PER", Float, "([ORIGINAL_EXTENSION] - [CURRENT_PRICE_TOTAL]) * -1")

F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_LINE_STRING", "String", "SUBSTRING('00' + [SET_LINE_NUMBER], LEN(CONVERT([SET_LINE_NUMBER], 'System.String')), 3) + '0'")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.LoadStagedOrders.End

Program.Sub.PrepareStagedOrders.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.bDoNotAllowNonInventory.Declare(Boolean, False)
V.Local.sExpression.Declare(String)
V.Local.bLocations.Declare(Boolean)
V.Local.bValidateLocations.Declare(Boolean)
V.Local.sRet.Declare(String)
V.Local.bCheckPO.Declare(Boolean, False)
V.Local.bCustomerSpecificPO.Declare(Boolean, False)
V.Local.bDisallowDuplicatePO.Declare(Boolean, False)
V.Local.sSQLExpression.Declare(String)
V.Local.bMandatoryPO.Declare(Boolean, False)
V.Local.sFilter.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.bNoBlankLocations.Declare(Boolean, False)
V.Local.sCoreField.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sFileContents.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.bNonTaxable.Declare(Boolean, False)
V.Local.sMessage.Declare(String)
V.Local.bLocationOverride.Declare(Boolean, False)

F.Intrinsic.Control.CallSub(AddLog, "Message", "Gathering additional data...")

'House of Doolittle customer number
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "HOD_CUSTOMER_NUMBER")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Data.DataTable.AddExpressionColumn("dtOrders", "HOD_CUSTOMER_NUMBER", "String", "'WEB' + Trim([ShipToState])")
		F.Data.DataTable.SetValueFormat("dtOrders", -1, "HOD_CUSTOMER_NUMBER", "GSS_CustomerNo", "")
		F.Data.DataTable.RemoveColumn("dtOrders", "HOD_CUSTOMER_NUMBER")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'DPI GL account
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "DPI_OVERRIDE_GL")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Intrinsic.String.Build("{0}\Custom\5807\{1}\GCG_5807_DPI_GL_CODES.dat", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sFile)
		F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.String.Build("Loading GL Overrides from file [{0}] for option DPI_OVERRIDE_GL...", V.Local.sFile, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
			
			F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sFileContents)
			F.Data.DataTable.CreateFromString("dtDPIGLAssociation", V.Local.sFileContents, "TYPE*!*CODE*!*ACCOUNT*!*PRODUCT_LINE", "String*!*String*!*String*!*String", ":", V.Ambient.NewLine)
			
			'R = Revenue
			F.Data.DataView.Create("dtDPIGLAssociation", "dvDPIGLAssociation", 22, "TYPE = 'R'", "")
			F.Data.DataView.ToDataTable("dtDPIGLAssociation", "dvDPIGLAssociation", "dtDictTemp")
			F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtDictTemp", "CODE", "PRODUCT_LINE")
			F.Data.DataTable.Close("dtDictTemp")
			F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
			F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "UserField1Head", "PRODUCT_LINE")
			F.Data.Dictionary.Close("dictTemp")
			
			'F = Freight
			F.Data.DataView.SetFilter("dtDPIGLAssociation", "dvDPIGLAssociation", "TYPE = 'F'")
			F.Data.DataView.ToDataTable("dtDPIGLAssociation", "dvDPIGLAssociation", "dtDictTemp")
			F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtDictTemp", "CODE", "ACCOUNT")
			F.Data.DataTable.Close("dtDictTemp")
			F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
			F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "UserField1Head", "FREIGHT_GL_ACCOUNT")
			F.Data.Dictionary.Close("dictTemp")
			
			F.Data.DataView.Close("dtDPIGLAssociation", "dvDPIGLAssociation")
			F.Data.DataTable.Close("dtDPIGLAssociation")
			
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.CallSub(AddLog, "Message", "The DPI_OVERRIDE_GL option is on but no GL association file [Global\Custom\5807\ccc\GCG_5807_DPI_GL_CODES.dat] was found.")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'check parts, customers, contacts exist
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

'check part
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "PART_AND_LOCATION")
F.Intrinsic.String.Build("select RTRIM(PART) + RTRIM(LOCATION) PART_LOC, Cast(1 as Bit) from V_INVENTORY_MSTR where PART_LOC in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "PART_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "PART_AND_LOCATION", "PART_EXISTS")
F.Data.Dictionary.Close("dictTemp")

'grab part UM
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "PART_AND_LOCATION")
F.Intrinsic.String.Build("select RTRIM(PART) + RTRIM(LOCATION) PART_LOC, RTRIM(UM_INVENTORY) from V_INVENTORY_MSTR where PART_LOC in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("dtOrders", "GSS_PART_UM", "String", "")
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "PART_AND_LOCATION", "GSS_PART_UM")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_PART_UM", "String", "IIF(Trim(IsNull([PART_UM], '')) <> '', [PART_UM], [GSS_PART_UM])")

'check GSS_CustomerNo
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "GSS_CustomerNo")
F.Intrinsic.String.Build("select RTRIM(CUSTOMER) CUSTOMER, Cast(1 as Bit) from V_CUSTOMER_MASTER where CUSTOMER in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "GSS_CUSTOMER_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "GSS_CustomerNo", "GSS_CUSTOMER_EXISTS")
F.Data.Dictionary.Close("dictTemp")

'check external customer, based on option
F.Data.DataTable.AddColumn("dtOrders", "GSS_CUSTOMER_FROM_EXTERNAL_CUSTOMER", "String", "")
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "Ext_CustomerNo")
F.Intrinsic.Control.CallSub(GetExternalIDField, "TYPE", "CUSTOMER")
F.Intrinsic.Control.If(V.Args.Core_Field, !=, "***DONOTSTORE***")
	F.Intrinsic.String.Build("select RTRIM({0}) CUSTOMER_ID, RTRIM(CUSTOMER) CUSTOMER from {1} where {0} in ('{2}') and {0} <> ''", V.Args.Core_Field, V.Args.Core_Table, V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select RTRIM(EXTERNAL_CUSTOMER_ID) CUSTOMER_ID, RTRIM(GSS_CUSTOMER_NUMBER) CUSTOMER from GCG_5807_CUST_STAGE where EXTERNAL_CUSTOMER_ID in ('{0}') and GSS_CUSTOMER_NUMBER <> ''", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtIDs", "Con", V.Local.sSQL)
F.Data.DataView.Create("dtIDs", "dvIDs", 22)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
	F.Intrinsic.String.Build("[CUSTOMER_ID] = '{0}'", V.DataTable.dtOrders(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtIDs", "dvIDs", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.DataView.dtIDs!dvIDs.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "GSS_CUSTOMER_FROM_EXTERNAL_CUSTOMER", V.DataView.dtIDs!dvIDs(0).CUSTOMER!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtIDs", "dvIDs")
F.Data.DataTable.Close("dtIDs")

F.Data.DataTable.AddColumn("dtOrders", "UPLOADED_CUSTOMER", "String", "")
F.Data.DataTable.AddExpressionColumn("dtOrders", "CUSTOMER_EXISTS", "Boolean", "IIF([GSS_CUSTOMER_FROM_EXTERNAL_CUSTOMER] <> '', True, [GSS_CUSTOMER_EXISTS])")
F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_CUSTOMER", "String", "IIF(Trim(IsNull([GSS_CUSTOMER_FROM_EXTERNAL_CUSTOMER], '')) <> '', [GSS_CUSTOMER_FROM_EXTERNAL_CUSTOMER], IIF(Trim(IsNull([UPLOADED_CUSTOMER], '')) <> '', Trim([UPLOADED_CUSTOMER]), Trim([GSS_CustomerNo])))")

'check contact
F.Data.DataTable.AddExpressionColumn("dtOrders", "CUSTOMER_CONTACT", "String", "Trim([FINAL_CUSTOMER]) + Trim([ShipToContactName])")
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "CUSTOMER_CONTACT")
F.Intrinsic.String.Replace(V.Args.Filter, "','", "***TEMPORARY-DELIMITER***", V.Local.sFilter)
V.Local.sFilter.Set(V.Local.sFilter.PSQLFriendly)
F.Intrinsic.String.Replace(V.Local.sFilter, "***TEMPORARY-DELIMITER***", "','", V.Local.sFilter)
F.Intrinsic.String.Build("select RTRIM(CUST) + RTRIM(NAME) as CUSTOMER_CONTACT, Cast(1 as Bit) from V_CONTACT where CUSTOMER_CONTACT in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "CONTACT_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "CUSTOMER_CONTACT", "CONTACT_EXISTS")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_DEFAULT_LOCATION", "String", "")
F.Data.DataTable.AddColumn("dtOrders", "DEFAULT_LOCATION", "String", "")
F.Data.DataTable.AddColumn("dtOrders", "LOCATION_EXISTS", "Boolean", False)
F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_LOCATION", "String", "IIF(Trim(IsNull([OrderLocation], '')) = '', IIF([CUSTOMER_DEFAULT_LOCATION] = '', [DEFAULT_LOCATION], [CUSTOMER_DEFAULT_LOCATION]), Trim([OrderLocation]))")

'check order number based off of external order
F.Data.DataTable.AddColumn("dtOrders", "ORDER_FROM_EXTERNAL_ORDER", "String", "")
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "Order_No_External")
F.Intrinsic.Control.CallSub(GetExternalIDField, "TYPE", "ORDER")

F.Intrinsic.Control.If(V.Args.Core_Field, !=, "***DONOTSTORE***")
	F.Intrinsic.String.Build("select RTRIM({0}) ORDER_ID, RTRIM(ORDER_NO) ORDER_NO from V_ORDER_HEADER where {0} in ('{1}')", V.Args.Core_Field, V.Args.Filter, V.Local.sSQL)
	
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtIDs", "Con", V.Local.sSQL)
	F.Data.DataView.Create("dtIDs", "dvIDs", 22)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
		F.Intrinsic.String.Build("[ORDER_ID] = '{0}'", V.DataTable.dtOrders(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sFilter)
		F.Data.DataView.SetFilter("dtIDs", "dvIDs", V.Local.sFilter)
		
		F.Intrinsic.Control.If(V.DataView.dtIDs!dvIDs.RowCount, >, 0)
			F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "ORDER_FROM_EXTERNAL_ORDER", V.DataView.dtIDs!dvIDs(0).ORDER_NO!FieldValTrim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCounter)
	F.Data.DataView.Close("dtIDs", "dvIDs")
	F.Data.DataTable.Close("dtIDs")
F.Intrinsic.Control.EndIf

'check quote number based off of external order
F.Data.DataTable.AddColumn("dtOrders", "QUOTE_FROM_EXTERNAL_ORDER", "String", "")
F.Intrinsic.Control.If(V.Args.Core_Field, !=, "***DONOTSTORE***")
	F.Intrinsic.Control.If(V.Args.Core_Field, =, "ORDER_SORT_2")
		V.Local.sCoreField.Set("QUOTE_SORT_2")
	F.Intrinsic.Control.Else
		V.Local.sCoreField.Set(V.Args.Core_Field)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("select RTRIM({0}) QUOTE_ID, RTRIM(QUOTE_NO) QUOTE_NO from V_QUOTE_HEADER where {0} in ('{1}')", V.Local.sCoreField, V.Args.Filter, V.Local.sSQL)
	
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtIDs", "Con", V.Local.sSQL)
	F.Data.DataView.Create("dtIDs", "dvIDs", 22)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
		F.Intrinsic.String.Build("[QUOTE_ID] = '{0}'", V.DataTable.dtOrders(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sFilter)
		F.Data.DataView.SetFilter("dtIDs", "dvIDs", V.Local.sFilter)
		
		F.Intrinsic.Control.If(V.DataView.dtIDs!dvIDs.RowCount, >, 0)
			F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "QUOTE_FROM_EXTERNAL_ORDER", V.DataView.dtIDs!dvIDs(0).QUOTE_NO!FieldValTrim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCounter)
	F.Data.DataView.Close("dtIDs", "dvIDs")
	F.Data.DataTable.Close("dtIDs")
F.Intrinsic.Control.EndIf

F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_IDENTIFIER_FROM_EXTERNAL_ORDER", "String", "IIF([TransactionCode] = 'Q', [QUOTE_FROM_EXTERNAL_ORDER], [ORDER_FROM_EXTERNAL_ORDER])")
F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_ORDER_NUMBER", "String", "IIF(Trim(IsNull([OrderNumber], '')) = '', [FINAL_IDENTIFIER_FROM_EXTERNAL_ORDER], [OrderNumber])")

'check if order exists
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "FINAL_ORDER_NUMBER")
F.Intrinsic.String.Build("select RTRIM(ORDER_NO), Cast(1 as Bit) from V_ORDER_HEADER where ORDER_NO in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "ORDER_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "FINAL_ORDER_NUMBER", "ORDER_EXISTS")
F.Data.Dictionary.Close("dictTemp")

'check if quote exists
F.Intrinsic.String.Build("select RTRIM(QUOTE_NO), Cast(1 as Bit) from V_QUOTE_HEADER where QUOTE_NO in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "QUOTE_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "FINAL_ORDER_NUMBER", "QUOTE_EXISTS")
F.Data.Dictionary.Close("dictTemp")

F.Global.General.ReadOption(400363, 0, False, V.Local.bLocations)
F.Intrinsic.Control.If(V.Local.bLocations)
	'customer default location
	F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "GSS_CustomerNo")
	F.Intrinsic.String.Build("select RTRIM(CUSTOMER), RTRIM(DEFAULT_LOC) from V_CUST_FORM_INFO where CUSTOMER in ('{0}')", V.Args.Filter, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "GSS_CustomerNo", "CUSTOMER_DEFAULT_LOCATION")
	F.Data.Dictionary.Close("dictTemp")
	
	'default location
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(LOCN) from V_LOCATION_ADDRESS where DEF_LOC = 1")
	F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(LOCN) from V_LOCATION_ADDRESS where DEF_LOC = 1", V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		F.Data.DataTable.SetValue("dtOrders", -1,"DEFAULT_LOCATION", V.Local.sRet)
	F.Intrinsic.Control.EndIf
	
	'validate locations
	F.Global.General.ReadOption(400363, 0, False, 2, V.Local.bValidateLocations)
	F.Intrinsic.Control.If(V.Local.bValidateLocations)
		F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "FINAL_LOCATION")
		F.Intrinsic.String.Build("select RTRIM(LOCATION), Cast(1 as Bit) from V_LOCATIONS where LOCATION in ('{0}')", V.Args.Filter, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
		F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
		F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "FINAL_LOCATION", "LOCATION_EXISTS")
		F.Data.Dictionary.Close("dictTemp")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'grab customer PO options
F.Global.General.ReadOption(401738, 0, False, V.Local.bMandatoryPO)
F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_PO_EXISTS", "Boolean", False)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select Cast(IF(RTRIM(ENG_NO_PO) = 'Y', 1, 0) as Bit) as CHECK_DUPLICATE_PO, Cast(IF(RTRIM(AUTO_NUMBER_ECC) = 'C', 1, 0) as Bit) as CUSTOMER_SPECIFIC, Cast(IF(RTRIM(ECC_PREFIX) = 'W', 0, 1) as Bit) as DISALLOW_DUPLICATE from WEB_OPTIONS where SYS = 'ORD' and SUB_SYS = 'PLN'")
F.ODBC.Connection!Con.ExecuteAndReturn("select Cast(IF(RTRIM(ENG_NO_PO) = 'Y', 1, 0) as Bit) as CHECK_DUPLICATE_PO, Cast(IF(RTRIM(AUTO_NUMBER_ECC) = 'C', 1, 0) as Bit) as CUSTOMER_SPECIFIC, Cast(IF(RTRIM(ECC_PREFIX) = 'W', 0, 1) as Bit) as DISALLOW_DUPLICATE from WEB_OPTIONS where SYS = 'ORD' and SUB_SYS = 'PLN'", V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	V.Local.bCheckPO.Set(V.Local.sRet(0))
	V.Local.bCustomerSpecificPO.Set(V.Local.sRet(1))
	V.Local.bDisallowDuplicatePO.Set(V.Local.sRet(2))
	V.Local.sRet.Redim(0, 0)
	
	'grab PO if necessary
	F.Intrinsic.Control.If(V.Local.bCheckPO)
		F.Intrinsic.Control.If(V.Local.bDisallowDuplicatePO)
			F.Intrinsic.Control.If(V.Local.bCustomerSpecificPO)
				V.Local.sExpression.Set("Trim([FINAL_CUSTOMER]) + Trim([CustomerPO])")
				V.Local.sSQLExpression.Set("RTRIM(CUSTOMER) + RTRIM(CUSTOMER_PO)")
			F.Intrinsic.Control.Else
				V.Local.sExpression.Set("Trim([CustomerPO])")
				V.Local.sSQLExpression.Set("RTRIM(CUSTOMER_PO)")
			F.Intrinsic.Control.EndIf
			
			'validate PO
			F.Data.DataTable.AddExpressionColumn("dtOrders", "CUSTOMER_PO_KEY", "String", V.Local.sExpression)
			F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "CUSTOMER_PO_KEY")
			
			F.Intrinsic.String.Build("select {0} CUSTOMER_PO_KEY, Cast(1 as Bit) from V_ORDER_HEADER where CUSTOMER_PO_KEY in ('{1}')", V.Local.sSQLExpression, V.Args.Filter, V.Local.sSQL)
			F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
			F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
			F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
			F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "CUSTOMER_PO_KEY", "CUSTOMER_PO_EXISTS")
			F.Data.Dictionary.Close("dictTemp")
			F.Data.DataTable.RemoveColumn("dtOrders", "CUSTOMER_PO_KEY")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'grab terms, they may pass the code or the description
F.Data.DataTable.AddColumn("dtOrders", "TERMS_MESSAGE_FROM_MESSAGE", "String", "")
F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(UPPER(TERMS_MESSAGE)) TERMS_MESSAGE_KEY, RTRIM(TERMS_MESSAGE) TERMS_MESSAGE from V_AR_TERMS where TERMS_MESSAGE not like '%\%%'")
F.Data.DataTable.CreateFromSQL("dtTemp", "Con", "select RTRIM(UPPER(TERMS_MESSAGE)) TERMS_MESSAGE_KEY, RTRIM(TERMS_MESSAGE) TERMS_MESSAGE from V_AR_TERMS where TERMS_MESSAGE not like '%\%%'")
F.Data.DataView.Create("dtTemp", "dvTemp", 22)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
	V.Local.sFilter.Set(V.DataTable.dtOrders(V.Local.iCounter).TERMS!FieldValTrim)
	F.Intrinsic.String.Build("[TERMS_MESSAGE_KEY] = '{0}'", V.Local.sFilter.UCase, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtTemp", "dvTemp", V.Local.sFilter)
	F.Intrinsic.Control.If(V.DataView.dtTemp!dvTemp.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "TERMS_MESSAGE_FROM_MESSAGE", V.DataView.dtTemp!dvTemp(0).TERMS_MESSAGE!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtTemp", "dvTemp")
F.Data.DataTable.Close("dtTemp")

F.Data.DataTable.AddColumn("dtOrders", "TERMS_MESSAGE_FROM_CODE", "String", "")
F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(UPPER(TERMS_CODE)) TERMS_CODE_KEY, RTRIM(TERMS_MESSAGE) TERMS_MESSAGE from V_AR_TERMS where TERMS_MESSAGE not like '%\%%'")
F.Data.DataTable.CreateFromSQL("dtTemp", "Con", "select RTRIM(UPPER(TERMS_CODE)) TERMS_CODE_KEY, RTRIM(TERMS_MESSAGE) TERMS_MESSAGE from V_AR_TERMS where TERMS_MESSAGE not like '%\%%'")
F.Data.DataView.Create("dtTemp", "dvTemp", 22)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
	V.Local.sFilter.Set(V.DataTable.dtOrders(V.Local.iCounter).TERMS!FieldValTrim)
	F.Intrinsic.String.Build("[TERMS_CODE_KEY] = '{0}'", V.Local.sFilter.UCase, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtTemp", "dvTemp", V.Local.sFilter)
	F.Intrinsic.Control.If(V.DataView.dtTemp!dvTemp.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "TERMS_MESSAGE_FROM_CODE", V.DataView.dtTemp!dvTemp(0).TERMS_MESSAGE!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtTemp", "dvTemp")
F.Data.DataTable.Close("dtTemp")

F.Data.DataTable.AddExpressionColumn("dtOrders", "FINAL_TERMS_MESSAGE", "String", "IIF([TERMS_MESSAGE_FROM_CODE] = '', [TERMS_MESSAGE_FROM_MESSAGE], [TERMS_MESSAGE_FROM_CODE])")

'check ship to ID
F.Data.DataTable.AddExpressionColumn("dtOrders", "SHIP_TO_KEY", "String", "TRIM(FINAL_CUSTOMER) + TRIM(IsNull(ShipToID, ''))")
F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(CUSTOMER) + RTRIM(SHIP_SEQ), Cast(1 as BIT) from V_OE_MULTI_SHIP union select RTRIM(CUSTOMER), Cast(1 as BIT) from V_CUSTOMER_MASTER")
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(CUSTOMER) + RTRIM(SHIP_SEQ), Cast(1 as BIT) from V_OE_MULTI_SHIP union select RTRIM(CUSTOMER), Cast(1 as BIT) from V_CUSTOMER_MASTER")
F.Data.Dictionary.SetDefaultReturn("dictTemp", False)
F.Data.DataTable.AddColumn("dtOrders", "SHIP_TO_EXISTS", "Boolean", False)
F.Data.DataTable.FillFromDictionary(dtOrders, "dictTemp", "SHIP_TO_KEY", "SHIP_TO_EXISTS")
F.Data.Dictionary.Close("dictTemp")

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

'now do the checks
F.Intrinsic.Control.CallSub(AddLog, "Message", "Verifying data...")
F.Data.DataView.Create("dtOrders", "dvCheck", 22)

'check quote
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking if quotes are allowed...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "ALLOW_QUOTE")
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "TransactionCode = 'Q' and Failed = False")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting.Not)
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The quote upload failed because the option to allow quote uploads is turned off.", "FAILED", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The quote upload failed because the option to allow quote uploads is turned off.", "FAILED", True)
F.Intrinsic.Control.EndIf

'if deleting, check if the order exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Delete_Order = True and Failed = False and Order_Exists = False and TransactionCode = 'O'")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order delete failed because the record was marked as an delete but the order doesn't exist.", "FAILED", True)
F.Intrinsic.Control.EndIf

'if updating, check if the quote exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Delete_Order = True and Failed = False and Quote_Exists = False and TransactionCode = 'Q'")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The quote delete failed because the record was marked as an delete but the quote doesn't exist.", "FAILED", True)
F.Intrinsic.Control.EndIf

'now setting the update flag ourselves based off keys instead of requiring the inserter to set it
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Failed = False and Order_Exists = True and TransactionCode = 'O'")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Update_Order", True)
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Failed = False and Quote_Exists = True and TransactionCode = 'Q'")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Update_Order", True)
F.Intrinsic.Control.EndIf

'check update
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking if updates are allowed...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "ALLOW_UPDATE")
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Update_Order = True and Failed = False and Delete_Order = False")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting.Not)
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order update failed because the option to allow updates to orders is turned off.", "FAILED", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order update failed because the option to allow updates to orders is turned off.", "FAILED", True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking if orders/quotes already exist...")
F.Intrinsic.Control.EndIf

'some of the below update checks don't make much sense anymore, leaving them in for now. 
'these were for when we were updating based solely off the update flag, and the update flag was set by the inserter, not us.
'if updating, check if the order exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Update_Order = True and Failed = False and Order_Exists = False and TransactionCode = 'O' and Delete_Order = False")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order update failed because the record was marked as an update but the order doesn't exist.", "FAILED", True)
F.Intrinsic.Control.EndIf

'if not updating, check if the order already exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Update_Order = False and Failed = False and Order_Exists = True and TransactionCode = 'O' and Delete_Order = False")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order upload failed because the order already exists.", "FAILED", True)
F.Intrinsic.Control.EndIf

'if updating, check if the quote exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Update_Order = True and Failed = False and Quote_Exists = False and TransactionCode = 'Q' and Delete_Order = False")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The quote update failed because the record was marked as an update but the quote doesn't exist.", "FAILED", True)
F.Intrinsic.Control.EndIf

'if not updating, check if the order already exists
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Update_Order = False and Failed = False and Quote_Exists = True and TransactionCode = 'Q' and Delete_Order = False")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The quote upload failed because the quote already exists.", "FAILED", True)
F.Intrinsic.Control.EndIf

'check prospect
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "TransactionCode = 'O' and Prospect = True and Failed = False and Delete_Order = False")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting.Not)
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order upload failed because orders cannot be created for prospects.", "FAILED", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order upload failed because orders cannot be created for prospects.", "FAILED", True)
F.Intrinsic.Control.EndIf

'check if part exists
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking if parts exist...")
F.Intrinsic.Control.EndIf

'DPI override location option
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "DPI_SET_LOCATION")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bLocationOverride.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'only do this check if not overriding the location
F.Intrinsic.Control.If(V.Local.bLocationOverride.Not)
	F.Global.General.ReadOption(401700, 0, False, V.Local.bDoNotAllowNonInventory)
	F.Intrinsic.Control.If(V.Local.bDoNotAllowNonInventory)
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "PART_EXISTS = False and Failed = False and TransactionCode = 'O' and Delete_Order = False and CONFIGURATOR_PART = False")
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified part does not exist in Global Shop, and the option to dissallow non-inventory parts on sales order lines is turned on.", "FAILED", True)
		
		'need to check for any other lines on these orders
		F.Data.DataView.Create("dtOrders", "dvCheck2", 22)
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "[FEEDBACK] = 'The specified part does not exist in Global Shop, and the option to dissallow non-inventory parts on sales order lines is turned on.'")
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtOrders!dvCheck.RowCount--, 1)
			F.Intrinsic.String.Build("Order_No_External = '{0}' and Feedback <> 'The specified part does not exist in Global Shop, and the option to dissallow non-inventory parts on sales order lines is turned on.'", V.DataView.dtOrders!dvCheck(V.Local.iCounter).ORDER_NO_EXTERNAL!FieldValTrim, V.Local.sFilter)
			F.Data.DataView.SetFilter("dtOrders", "dvCheck2", V.Local.sFilter)
			F.Data.DataView.SetValue("dtOrders", "dvCheck2", -1, "Feedback", "The order failed to upload because one of the parts does not exist in Global Shop, and the option to dissallow non-inventory parts on sales order lines is turned on.", "FAILED", True)
		F.Intrinsic.Control.Next(V.Local.iCounter)
		F.Data.DataView.Close("dtOrders", "dvCheck2")
	F.Intrinsic.Control.EndIf
	
	'also check quote non inventory option
	F.Global.General.ReadOption("020000", 1, "", V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim, =, "N")
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "PART_EXISTS = False and Failed = False and TransactionCode = 'Q' and Delete_Order = False and CONFIGURATOR_PART = False")
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified part does not exist in Global Shop, and the option to allow non-inventory parts on quote lines is turned off.", "FAILED", True)
		
		'need to check for any other lines on these quotes
		F.Data.DataView.Create("dtOrders", "dvCheck2", 22)
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "[FEEDBACK] = 'The specified part does not exist in Global Shop, and the option to allow non-inventory parts on quote lines is turned off.'")
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtOrders!dvCheck.RowCount--, 1)
			F.Intrinsic.String.Build("Order_No_External = '{0}' and Feedback <> 'The specified part does not exist in Global Shop, and the option to allow non-inventory parts on quote lines is turned off.'", V.DataView.dtOrders!dvCheck(V.Local.iCounter).ORDER_NO_EXTERNAL!FieldValTrim, V.Local.sFilter)
			F.Data.DataView.SetFilter("dtOrders", "dvCheck2", V.Local.sFilter)
			F.Data.DataView.SetValue("dtOrders", "dvCheck2", -1, "Feedback", "The order failed to upload because one of the parts does not exist in Global Shop, and the option to allow non-inventory parts on quote lines is turned off.", "FAILED", True)
		F.Intrinsic.Control.Next(V.Local.iCounter)
		F.Data.DataView.Close("dtOrders", "dvCheck2")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'check customer PO options
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking customer PO options...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bMandatoryPO)
	F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CUSTOMER_PO_ENTERED = False and Failed = False and TransactionCode = 'O' and UPDATE_ORDER = False and Delete_Order = False")
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order upload failed because no Customer PO was entered and the option for mandatory customer POs is on.", "FAILED", True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bCheckPO)
	F.Intrinsic.Control.If(V.Local.bDisallowDuplicatePO)
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CUSTOMER_PO_EXISTS = True and Failed = False and TransactionCode = 'O' and UPDATE_ORDER = False and Delete_Order = False")
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The order upload failed because the Customer PO already exists and the option to disallow duplicate customer POs is on.", "FAILED", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'check order locations
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking location options...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bLocations)
	F.Intrinsic.Control.If(V.Local.bValidateLocations)
		F.Global.General.ReadOption(400363, 0, False, 3, V.Local.bNoBlankLocations)
		F.Intrinsic.Control.If(V.Local.bNoBlankLocations)
			F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Failed = False and LOCATION_EXISTS = False and Delete_Order = False")
			F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The upload failed because the option to validate locations is on and no valid location was passed or found in the customer default location or company default location.", "FAILED", True)
		F.Intrinsic.Control.Else
			F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Failed = False and LOCATION_EXISTS = False and FINAL_LOCATION <> '' and Delete_Order = False")
			F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The upload failed because the option to validate locations is on and no valid location was passed or found in the customer default location or company default location.", "FAILED", True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Data.DataView.SetFilter("dtOrders", "dvCheck", "Failed = False and FINAL_LOCATION <> '' and Delete_Order = False")
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The upload failed because a location was passed and the company option to use locations is not on.", "FAILED", True)
F.Intrinsic.Control.EndIf

'fix phone numbers
F.Intrinsic.Control.CallSub(FixPhoneNumbers)

'grab discount fields
F.Intrinsic.Control.CallSub(GrabCustomerDiscounts)

'check negative cost

'create customers if needed
F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.Control.CallSub(AddLog, "Message", "Checking if customers are to be created at order time...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "CUSTOMER", "NAME", "CREATE_AT_ORDER_TIME")
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CUSTOMER_EXISTS = False and Failed = False and Delete_Order = False")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		'check if customer name is given
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CUSTOMER_EXISTS = False and Failed = False and (FINAL_CUSTOMER_NAME is null or FINAL_CUSTOMER_NAME = '') and Delete_Order = False")
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified customer does not exist in Global Shop, and no customer name in BillToName or ShipToName was passed to create it with.", "FAILED", True)
		F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CUSTOMER_EXISTS = False and Failed = False and Delete_Order = False")
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
			F.Intrinsic.Control.CallSub(UploadCustomers)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified customer does not exist in Global Shop and the option to create customers at order creation time is turned off.", "FAILED", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified customer does not exist in Global Shop and the option to create customers at order creation time is turned off.", "FAILED", True)
F.Intrinsic.Control.EndIf

'fail invalid ship to IDs
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "SHIP_TO_EXISTS = False and Failed = False and Delete_Order = False")
F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
	F.Data.DataView.SetValue("dtOrders", "dvCheck", -1, "Feedback", "The specified Ship To ID does not exist for the passed customer.", "FAILED", True)
F.Intrinsic.Control.EndIf

'create contacts if needed
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "CONTACT", "NAME", "CREATE_AT_ORDER_TIME")
F.Data.DataView.SetFilter("dtOrders", "dvCheck", "CONTACT_EXISTS = False and Failed = False and Delete_Order = False and SHIPTOCONTACTNAME <> ''")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvCheck.RowCount, >, 0)
			F.Intrinsic.Control.CallSub(UploadContacts)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtOrders", "dvCheck")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.PrepareStagedOrders.End

Program.Sub.UploadStagedOrders.Start
F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long) 
V.Local.sFilter.Declare(String)
V.Local.iLineCounter.Declare(Long)
V.Local.sNextOrder.Declare(String)
V.Local.sFreight.Declare(String)
V.Local.sDiscountPercentage.Declare(String)
V.Local.dDueDate.Declare(Date)
V.Local.dDate.Declare(Date)
V.Local.sShipInternational.Declare(String)
V.Local.sExtraText.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sQuantity.Declare(String)
V.Local.sUnitPrice.Declare(String)
V.Local.sExtension.Declare(String)
V.Local.sTaxFlag.Declare(String, "E")
V.Local.bTaxLine.Declare(Boolean, False)
V.Local.fTaxes.Declare(Float)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sExternalOrderField.Declare(String)
V.Local.sNumber.Declare(String)
V.Local.sType.Declare(String)
V.Local.sExternalID.Declare(String)
V.Local.sTransaction.Declare(String)
V.Local.sTerms.Declare(String)
V.Local.bNegativeQuantity.Declare(Boolean, False)
V.Local.bZeroItemPrice.Declare(Boolean, False)
V.Local.fQuantity.Declare(Float)
V.Local.fPrice.Declare(Float)
V.Local.fExtension.Declare(Float)
V.Local.bNegativePrice.Declare(Boolean, False)
V.Local.sStatus.Declare(String)
V.Local.sCommentsPosition.Declare(String)
V.Local.sOnSalesOrder.Declare(String, "")
V.Local.sOnInvoice.Declare(String, "")
V.Local.sOnQuote.Declare(String, "")
V.Local.sOnPackingList.Declare(String, "")
V.Local.iLine.Declare(Long)
V.Local.bManualOrderNumber.Declare(Boolean, False)
V.Local.sQuotedPrice.Declare(String, "")
V.Local.iRet.Declare(Long)
V.Local.sWaitMessage.Declare(String)
V.Local.iWaitMessageOrder.Declare(Long)
V.Local.sSubFilter.Declare(String)
V.Local.bLocationOverride.Declare(Boolean, False)
V.Local.sLocation.Declare(String)
V.Local.sDescription.Declare(String)
V.Local.sDropShip.Declare(String)
V.Local.sFinalTaxFlag.Declare(String)
V.Local.fDiscount.Declare(Float)
V.Local.bNegativeDiscount.Declare(Boolean, False)
V.Local.sPart.Declare(String)
V.Local.bDPIBomLocation.Declare(Boolean, False)
V.Local.sDPIBomLocationScript.Declare(String, "")
V.Local.sConfiguratorScript.Declare(String, "")
V.Local.bSetFeedback.Declare(Boolean, False)
V.Local.sFeedback.Declare(String)
V.Local.sDueDate.Declare(String)
V.Local.bBomExplode.Declare(Boolean, False)
V.Local.bDoNotCombineBomComponents.Declare(Boolean, False)
V.Local.bDiscountQuotedPrice.Declare(Boolean, False)
V.Local.bCalculateDiscount.Declare(Boolean, False)
V.Local.fSum.Declare(Float)
V.Local.bCorePricing.Declare(Boolean, True)
V.Local.sTemp.Declare(String)
V.Local.bMarkShipment.Declare(Boolean, False)
V.Local.sOverridePrice.Declare(String)
V.Local.bFailed.Declare(Boolean, False)

'check tax option
F.Intrinsic.Control.CallSub(GetSetting, "Type", "ORDER", "NAME", "TAX_CALCULATION")
F.Intrinsic.Control.If(V.Args.Setting.UCase.Trim, =, "USE GLOBAL SHOP TAXES")
	V.Local.sTaxFlag.Set("")
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Args.Setting.UCase.Trim, =, "ADD TAXES AS EXTRA LINE")
		V.Local.bTaxLine.Set(True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'check external order option
F.Intrinsic.Control.CallSub(GetExternalIDField, "TYPE", "ORDER")

'grab comments options
'position is blank if header, 1 if footer
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "COMMENTS_POSITION")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "Footer")
		V.Local.sCommentsPosition.Set("F")
	F.Intrinsic.Control.Else
		V.Local.sCommentsPosition.Set("H")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	V.Local.sCommentsPosition.Set("H")
F.Intrinsic.Control.EndIf

'grab options
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "COMMENTS_SALES_ORDER")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sOnSalesOrder.Set("Y")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "COMMENTS_INVOICE")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sOnInvoice.Set("Y")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "COMMENTS_QUOTE")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sOnQuote.Set("Y")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "COMMENTS_PACK_LIST")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sOnPackingList.Set("Y")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'DPI override location option
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "DPI_SET_LOCATION")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bLocationOverride.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'DPI override BOM Location
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "DPI_BOM_LOCATION")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bDPIBomLocation.Set(V.Args.Setting)
	F.Intrinsic.Control.If(V.Local.bDPIBomLocation)
		F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Global.sDPIBomLocationScript, V.Local.sDPIBomLocationScript)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "ALLOW_CORE_PRICING")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bCorePricing.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'check bom explode option
F.Global.General.ReadOption(401724, 0, False, V.Local.bBomExplode)
F.Global.General.ReadOption(401730, 0, False, V.Local.bDoNotCombineBomComponents)

'discount option
F.Global.General.ReadOption(401578, 0, False, V.Local.bDiscountQuotedPrice)

'loop through orders and upload each one
F.Data.DataView.Create("dtOrders", "dvUpload", 22, "", "Order_No_External, LineNumber, RecordID")
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrderNumbers.RowCount--, 1)
	V.Local.bFailed.Set(False)
	V.Local.bSetFeedback.Set(False)
	
	F.Intrinsic.Math.Add(V.Local.iCounter, 1, V.Local.iWaitMessageOrder)
	F.Intrinsic.String.Build("Processing order {0} of {1}.", V.Local.iWaitMessageOrder, V.DataTable.dtOrderNumbers.RowCount, V.Local.sWaitMessage)
	F.Intrinsic.UI.ChangeWaitStatus(V.Local.sWaitMessage)
	
	F.Intrinsic.String.Build("Failed = False and Order_No_External = '{0}'", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtOrders", "dvUpload", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.Global.bDataBackups)
		F.Intrinsic.Control.CallSub(BackUpDataTable, "DataTable", "dtOrders", "Type", "Order", "Name", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, "DataView", "dvUpload")
	F.Intrinsic.Control.EndIf
	
	'should never be an issue but it doesn't hurt to check
	F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload.RowCount, >, 0)
		'get type
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
			V.Local.sType.Set("Quote")
		F.Intrinsic.Control.Else
			V.Local.sType.Set("Order")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("Processing external {0} {1}...", V.Local.sType, V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Delete_Order!FieldVal)
			'order is marked for deletion, delete it
			F.Intrinsic.String.LPad(V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, "0", 7, V.Local.sNumber)
			V.Local.sTransaction.Set("Deletion")
			
			'check if there are open shipments
			'..should we check for work orders as well
			F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "O")
				F.Intrinsic.String.Build("select ORDER_NO from V_SHIPMENT_HEADER where ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
				F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
				F.Intrinsic.Control.CallSub(Connection, "Connect", True)
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.CallSub(Connection, "Connect", False)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF, =, True, "OR", V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
				F.Intrinsic.String.Build("{0} {1} marked for deletion. Deleting...", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
					F.Intrinsic.Control.CallSub(DeleteQuote, "QUOTE", V.Local.sNumber)
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.CallSub(DeleteOrder, "ORDER", V.Local.sNumber)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.String.Build("Successful {3} of {2} {0} from external order {1}.", V.Local.sNumber, V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "OrderNumber", V.Local.sNumber, "FeedBack", V.Local.sMessage)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				
				F.Intrinsic.Math.Add(V.Global.iDeleted, 1, V.Global.iDeleted)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("{0} of {1} {2} failed because open shipments exist for this order. Please delete the shipments first and try again.", V.Local.sTransaction, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "OrderNumber", V.Local.sNumber, "FeedBack", V.Local.sMessage, "Failed", True)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
			F.Intrinsic.Control.EndIf
				
		F.Intrinsic.Control.Else
			
			F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Update_Order!FieldVal)
				F.Intrinsic.String.LPad(V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, "0", 7, V.Local.sNumber)
				V.Local.sTransaction.Set("Update")
				
				'since we are updating, delete the current version
				F.Intrinsic.String.Build("Update found for {0} {1}. Deleting for re-upload.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				
				'check if there are open shipments
				'..should we check for work orders as well
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "O")
					F.Intrinsic.String.Build("select ORDER_NO from V_SHIPMENT_HEADER where ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.Intrinsic.Control.CallSub(Connection, "Connect", True)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.Control.CallSub(Connection, "Connect", False)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF, =, True, "OR", V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.Control.CallSub(DeleteQuote, "QUOTE", V.Local.sNumber)
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.CallSub(DeleteOrder, "ORDER", V.Local.sNumber)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Build("{0} of {1} {2} failed because open shipments exist for this order. Please delete the shipments first and try again.", V.Local.sTransaction, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
					F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "OrderNumber", V.Local.sNumber, "FeedBack", V.Local.sMessage, "Failed", True)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					V.Local.bFailed.Set(True)
					V.Local.bSetFeedback.Set(True)
					V.Local.sFeedback.Set(V.Local.sMessage)
				F.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.Else
				'get next sales order / quote
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, !=, "")
					V.Local.bManualOrderNumber.Set(True)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, "0", 7, V.Local.sNumber)
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.Control.CallSub(GetNextQuoteNumber)
						V.Local.sNumber.Set(V.Args.QUOTE)
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.CallSub(GetNextOrderNumber)
						V.Local.sNumber.Set(V.Args.NEXT_ORDER)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				V.Local.sTransaction.Set("Upload")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Local.bFailed.Not)
				'update last order number
				'only if it was auto generated
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Update_Order!FieldVal, =, False)
					F.Intrinsic.Control.If(V.Local.bManualOrderNumber.Not)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
							F.Intrinsic.Control.CallSub(UpdateLastQuoteNumber, "LAST_QUOTE", V.Local.sNumber.Long)
						F.Intrinsic.Control.Else
							F.Intrinsic.Control.CallSub(UpdateLastOrderNumber, "LAST_ORDER", V.Local.sNumber.Long)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "FINAL_ORDER_STRING", V.Local.sNumber)
				
				'set external order number based on option
				F.Intrinsic.Control.If(V.Args.UPLOAD_Field, !=, "***DONOTSTORE***")
					V.Local.sExternalID.Set(V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim)
					F.Intrinsic.Control.If(V.Local.sExternalID.Length, >, V.Args.Size)
					
						F.Intrinsic.Control.If(V.Global.bExtendedLogging)
							F.Intrinsic.String.Build("External ID [{0}] is too long ({1}) for Field [{2}] ({3}). ID will be truncated.", V.Local.sExternalID, V.Local.sExternalID.Length, V.Args.CORE_Field, V.Args.Size, V.Local.sMessage)
							F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.String.Left(V.Local.sExternalID, V.Args.Size, V.Local.sExternalID)
					F.Intrinsic.Control.EndIf
					F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, V.Args.UPLOAD_Field, V.Local.sExternalID)
				F.Intrinsic.Control.EndIf			
				
				'grab discount fields
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).OrderDiscPercentage!FieldValFloat, =, 0)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).CUSTOMER_ORDER_DISCOUNT!FieldValFloat, !=, 0)
							F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "OrderDiscPercentage", V.DataView.dtOrders!dvUpload(0).CUSTOMER_ORDER_DISCOUNT!FieldValFloat)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'add to header table and extra table
				F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.DataView.dtOrders!dvUpload(0).Freight!FieldValFloat, "BEFORE_DECIMAL", 8, "AFTER_DECIMAL", 2)
				V.Local.sFreight.Set(V.Args.CALLWRAPPER_DECIMAL)
				F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.DataView.dtOrders!dvUpload(0).OrderDiscPercentage!FieldValFloat, "BEFORE_DECIMAL", 3, "AFTER_DECIMAL", 2)
				V.Local.sDiscountPercentage.Set(V.Args.CALLWRAPPER_DECIMAL)
				
				V.Local.dDueDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDueDate!FieldVal)
				V.Local.dDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDate!FieldVal)
				
				'check ship to id
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, !=, "")
					F.Intrinsic.String.Build("select RTRIM(SHIP_SEQ) from V_OE_MULTI_SHIP where CUSTOMER = '{0}' and SHIP_SEQ = '{1}'", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.Intrinsic.Control.CallSub(Connection, "Connect", True)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.Control.CallSub(Connection, "Connect", False)
					
					F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
						F.Intrinsic.String.Build("Warning: Ship To ID [{0}] on [{1}] [{2}] does not exist for customer [{3}]. Clearing ship to id...", V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "ShipToID", "")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'check ship via
				F.Intrinsic.Control.CallSub(CarrierShipViaCheck)
				
				'header table
				F.Data.DataTable.AddRow("ORDUPL", "Transaction", V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, "CustomerNo", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, "OrderNumber", V.Local.sNumber, "Freight", V.Local.sFreight, "OrderDueDate", V.Local.dDueDate.FormatYYYYMMDD, "OrderDate", V.Local.dDate.FormatYYYYMMDD, "UserField1Head", V.DataView.dtOrders!dvUpload(0).UserField1Head!FieldValTrim, "UserField2Head", V.DataView.dtOrders!dvUpload(0).UserField2Head!FieldValTrim, "UserField3Head", V.DataView.dtOrders!dvUpload(0).UserField3Head!FieldValTrim, "UserField4Head", V.DataView.dtOrders!dvUpload(0).UserField4Head!FieldValTrim, "UserField5Head", V.DataView.dtOrders!dvUpload(0).UserField5Head!FieldValTrim, "UserID", V.Caller.User, "CustomerPO", V.DataView.dtOrders!dvUpload(0).CustomerPO!FieldValTrim, "ShipToName", V.DataView.dtOrders!dvUpload(0).ShipToName!FieldValTrim, "ShipToAddress1", V.DataView.dtOrders!dvUpload(0).ShipToAddress1!FieldValTrim, "ShipToAddress2", V.DataView.dtOrders!dvUpload(0).ShipToAddress2!FieldValTrim, "ShipToAddress3", V.DataView.dtOrders!dvUpload(0).ShipToAddress3!FieldValTrim, "ShipToCity", V.DataView.dtOrders!dvUpload(0).ShipToCity!FieldValTrim, "ShipToState", V.DataView.dtOrders!dvUpload(0).ShipToState!FieldValTrim, "ShipToZip", V.DataView.dtOrders!dvUpload(0).ShipToZip!FieldValTrim, "ShipToCountry", V.DataView.dtOrders!dvUpload(0).ShipToCountry!FieldValTrim, "ShipToAttention", V.DataView.dtOrders!dvUpload(0).ShipToAttention!FieldValTrim, "OrderType", V.DataView.dtOrders!dvUpload(0).OrderType!FieldValTrim, "OrderDiscPercentage", V.Local.sDiscountPercentage, "ContactName", V.DataView.dtOrders!dvUpload(0).ShipToContactName!FieldValTrim, "Salesman", V.DataView.dtOrders!dvUpload(0).SalespersonCode!FieldValTrim, "FromLoc", V.DataView.dtOrders!dvUpload(0).FINAL_LOCATION!FieldValTrim, "OverrideAutoNumbering", 1, "MarkShipment", V.DataView.dtOrders!dvUpload(0).MarkShipment!FieldValTrim, "ShipToID", V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim)
				
				'upload temporary filler comments to overwrite later
				'this is because the webimport is not great with comments, it breaks with new lines and they can only be 300 characters. 
				'so I want to upload them via SQL BUT there are some cobol shenanigans going on in the comments module
				'****The SYS080 is a universal Comment screen. The flag 1 is for footer, and Low Values Comp-5 (in Cobol) is for Header. 
				'****You can use SQL to insert footer and later successfully bring the comment into the textbox in the screen. 
				'****However, with Header, the Low Values Comp-5 create a half word offset which is different to 0/null/blank in SQL. So if you use SQL, the screen can not read that value
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).AddlCommentsHead!FieldValTrim, !=, "")
					V.Local.sExtraText.Set("***TEMPORARY-FILLER-COMMENT***")
				F.Intrinsic.Control.Else
					V.Local.sExtraText.Set("")
				F.Intrinsic.Control.EndIf
				
				'extra table
				F.Data.DataTable.AddRow("ORDUPLExtra", "ShipToInternationalFlag", V.DataView.dtOrders!dvUpload(0).SHIP_INTERNATIONAL_STRING!FieldValTrim, "ShipToName", V.DataView.dtOrders!dvUpload(0).ShipToName!FieldValTrim, "ShipToAddress1", V.DataView.dtOrders!dvUpload(0).ShipToAddress1!FieldValTrim, "ShipToAddress2", V.DataView.dtOrders!dvUpload(0).ShipToAddress2!FieldValTrim, "ShipToAddress3", V.DataView.dtOrders!dvUpload(0).ShipToAddress3!FieldValTrim, "ShipToCity", V.DataView.dtOrders!dvUpload(0).ShipToCity!FieldValTrim, "ShipToState", V.DataView.dtOrders!dvUpload(0).ShipToState!FieldValTrim, "ShipToZip", V.DataView.dtOrders!dvUpload(0).ShipToZip!FieldValTrim, "ShipToCountry", V.DataView.dtOrders!dvUpload(0).ShipToCountry!FieldValTrim, "ShipToAttention", V.DataView.dtOrders!dvUpload(0).ShipToAttention!FieldValTrim, "BillToInternationalFlag", V.DataView.dtOrders!dvUpload(0).BILL_INTERNATIONAL_STRING!FieldValTrim, "BillToName", V.DataView.dtOrders!dvUpload(0).BillToName!FieldValTrim, "BillToAddress1", V.DataView.dtOrders!dvUpload(0).BillToAddress1!FieldValTrim, "BillToAddress2", V.DataView.dtOrders!dvUpload(0).BillToAddress2!FieldValTrim, "BillToAddress3", V.DataView.dtOrders!dvUpload(0).BillToAddress3!FieldValTrim, "BillToAddress4", V.DataView.dtOrders!dvUpload(0).BillToAddress4!FieldValTrim, "BillToAddress5", V.DataView.dtOrders!dvUpload(0).BillToAddress5!FieldValTrim, "BillToCity", V.DataView.dtOrders!dvUpload(0).BillToCity!FieldValTrim, "BillToState", V.DataView.dtOrders!dvUpload(0).BillToState!FieldValTrim, "BillToZip", V.DataView.dtOrders!dvUpload(0).BillToZip!FieldValTrim, "BillToCountry", V.DataView.dtOrders!dvUpload(0).BillToCountry!FieldValTrim, "BillToAttention", V.DataView.dtOrders!dvUpload(0).BillToAttention!FieldValTrim, "ContactEmail", V.DataView.dtOrders!dvUpload(0).ShipToContactEmail!FieldValTrim, "ContactPhone", V.DataView.dtOrders!dvUpload(0).ShipToContactPhone!FieldValTrim, "OrderSort", V.DataView.dtOrders!dvUpload(0).OrderSort!FieldValTrim, "OrderSort2", V.DataView.dtOrders!dvUpload(0).OrderSort2!FieldValTrim, "ExtraTextLine1", V.Local.sExtraText, "TextPosition", V.Local.sCommentsPosition, "ApplyTextToSalesOrder", V.Local.sOnSalesOrder, "ApplyTextToPackList", V.Local.sOnPackingList, "ApplyTextToInvoice", V.Local.sOnInvoice, "ApplyTextToQuote", V.Local.sOnQuote, "ShipToAddress4", V.DataView.dtOrders!dvUpload(0).ShipToAddress4!FieldValTrim, "ShipToAddress5", V.DataView.dtOrders!dvUpload(0).ShipToAddress5!FieldValTrim)
				
				V.Local.sFinalTaxFlag.Set(V.Local.sTaxFlag.Trim)
				
				'add to line table	
				V.Local.iLine.Set(0)
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvUpload.RowCount--, 1)
					
					V.Local.dDate.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LINE_DATE!FieldVal)
					V.Local.dDueDate.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LINE_PROMISE_DATE!FieldVal)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LineNumber!FieldValLong, >, 0)		
						V.Local.iLine.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LineNumber!FieldValLong)
						F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "SET_LINE_NUMBER", V.Local.iLine)
						
						'check for duplicate lines
						F.Intrinsic.String.Build("Order_No_External = '{0}' and LineNumber = {1}", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.iLine, V.Local.sFilter)
						F.Data.DataView.Create("dtOrders", "dvLineCheck", 22, V.Local.sFilter, "")
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvLineCheck.RowCount, >, 1)
							V.Local.bFailed.Set(True)
							V.Local.bSetFeedback.Set(True)
							F.Intrinsic.String.Build("{0} of {1} {2} failed because duplicate line numbers were passed. Please make sure each line number is unique or blank.", V.Local.sTransaction, V.Local.sType, V.Local.sNumber, V.Local.sFeedback)
						F.Intrinsic.Control.EndIf
						F.Data.DataView.Close("dtOrders", "dvLineCheck")
					F.Intrinsic.Control.Else
						F.Intrinsic.Math.Add(V.Local.iLine, 1, V.Local.iLine)
						F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "SET_LINE_NUMBER", V.Local.iLine)
						
	
						'if this part is a bom and they have the bom explode option on, we need to find out how many lines that will add
						F.Intrinsic.Control.If(V.Local.bBomExplode)
							F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
							
							'check if this part is a BOM
							F.Intrinsic.String.Build("select RTRIM(CODE_BOM) from V_INVENTORY_MSTR where PART = '{0}' and LOCATION = '{1}'", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PartLoc!FieldValTrim, V.Local.sSQL)
							F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
							F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
							
							F.Intrinsic.Control.If(V.Local.sRet.Trim, =, "B")
								'the part is a BOM and will be exploded on the sales order, check how many lines there are
								F.Intrinsic.Control.If(V.Local.bDoNotCombineBomComponents)
									F.Intrinsic.String.Build("select COUNT(PART) from V_BOM_MSTR where PARENT = '{0}' and RTRIM(IsNull(CATEGORY, '')) in ('', 'P', '1') and SEQUENCE_BOM <> '0000'", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, V.Local.sSQL)
								F.Intrinsic.Control.Else
									F.Intrinsic.String.Build("select COUNT(X.PART) from (select distinct PART from V_BOM_MSTR where PARENT = '{0}' and RTRIM(IsNull(CATEGORY, '')) in ('', 'P', '1') and SEQUENCE_BOM <> '0000') X", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, V.Local.sSQL)
								F.Intrinsic.Control.EndIf
								F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
								F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
							
								F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
									'if there are parts to be added, add the lines here
									F.Intrinsic.String.Build("Incrementing line number by {3} for an exploded bom on {0} {1} line {2}.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, V.Local.sRet.Long, V.Local.sMessage)
									F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
									
									F.Intrinsic.Math.Add(V.Local.iLine, V.Local.sRet.Long, V.Local.iLine)
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					'exit if we failed
					F.Intrinsic.Control.If(V.Local.bFailed)
						F.Intrinsic.Control.ExitFor(V.Local.iLineCounter)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					
					'write comment record with web importer, then update comment manually
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).AddlCommentsLine!FieldValTrim, =, "")
						V.Local.sExtraText.Set("")
					F.Intrinsic.Control.Else
						V.Local.sExtraText.Set("***TEMPORARY-FILLER-COMMENT***")
					F.Intrinsic.Control.EndIf
					
					'check for configurator upload
					'CURRENTLY THIS DOES NOT WORK IF THERE ARE BOM EXPLODES
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).CONFIGURATOR_PART!FieldVal)
						F.Intrinsic.String.Build("Running configurator upload on {0} {1} line {2}.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
							
						'run the configurator upload for this
						F.Global.General.SetPassedDataElement("EXTERNAL_ORDER", V.Local.sExternalID)
						F.Global.General.SetPassedDataElement("ORDER_LINE", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong)
						F.Global.General.SetPassedDataElement("ORDER_NUMBER", V.Local.sNumber)
						F.Global.General.SetPassedDataElement("CUSTOMER", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim)
						
						'clear old return
						F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, "GCG_5807_ConfiguratorUploader", V.Global.sProject, 0, False, "", False, 0, 0, V.Ambient.Date, V.Ambient.Now)
						
						F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Global.sConfiguratorScript, V.Local.sConfiguratorScript)
						F.Global.General.CallSyncGAS(V.Local.sConfiguratorScript)
						
						'once that's done, check for feedback
						F.Global.Registry.ReadValue(V.Caller.User, V.Caller.CompanyCode, "GCG_5807_ConfiguratorUploader", V.Global.sProject, 0, 5, "", V.Local.sRet)
						
						F.Intrinsic.String.Split(V.Local.sRet, "::", V.Local.sRet)
						F.Intrinsic.Control.If(V.Local.sRet.UBound, >, 0)
							F.Intrinsic.Control.If(V.Local.sRet(1).Not)
								'successful upload
								F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "GSS_PartNumber", V.Local.sRet(0).Trim)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Build("{3} for external {2} {0} failed with message: {1}", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).Order_No_External!FieldValTrim, "The configurator failed to process the part for this line. There may be an issue with the passed configurator data in GCG_5807_CNFG_STAGE.", V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
								F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
								
								V.Local.bSetFeedback.Set(True)
								V.Local.sFeedback.Set(V.Local.sMessage)
								V.Local.bFailed.Set(True)
							F.Intrinsic.Control.EndIf
							
							'pull the price if needed
							F.Intrinsic.Control.If(V.Local.sRet(2))
								'configured price was passed, set it
								F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "PriceBeforeDiscount", V.Local.sRet(3).Float, "CONFIGURED_PRICE", True)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("{3} for external {2} {0} failed with message: {1}", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).Order_No_External!FieldValTrim, "The configurator failed to process the part for this line. There may be an issue with the passed configurator data in GCG_5807_CNFG_STAGE.", V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
							F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
							
							V.Local.bSetFeedback.Set(True)
							V.Local.bFailed.Set(True)
							V.Local.sFeedback.Set(V.Local.sMessage)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					'exit if we failed
					F.Intrinsic.Control.If(V.Local.bFailed)
						F.Intrinsic.Control.ExitFor(V.Local.iLineCounter)
					F.Intrinsic.Control.EndIf
					
					'set negative flag, format numbers for web importer
					V.Local.fQuantity.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).QtyOrdered!FieldValFloat)
					F.Intrinsic.Control.If(V.Local.fQuantity, <, 0)
						V.Local.bNegativeQuantity.Set(True)
						F.Intrinsic.Math.Abs(V.Local.fQuantity, V.Local.fQuantity)
					F.Intrinsic.Control.Else
						V.Local.bNegativeQuantity.Set(False)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.Local.fQuantity, "BEFORE_DECIMAL", 9, "AFTER_DECIMAL", 4)
					V.Local.sQuantity.Set(V.Args.CALLWRAPPER_DECIMAL)
					
					'push order discount down to lines
					'doing this for Virnig but overall this doesn't make sense
					'we technically should always push it down
					F.Intrinsic.Control.If(V.Local.bCorePricing)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).OrderDiscPercentage!FieldValFloat, !=, 0)
							F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, =, 0)
								F.Intrinsic.Math.Div(V.DataView.dtOrders!dvUpload(0).OrderDiscPercentage!FieldValFloat, 100, V.Local.fDiscount)
								F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "ORDER_DISCOUNT", V.Local.fDiscount)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
	
					'push price class discount down to lines
					F.Intrinsic.Control.If(V.Local.bCorePricing)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).CUSTOMER_PRICE_CLASS_DISCOUNT!FieldValFloat, !=, 0)
							F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, =, 0)
								F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "PRICE_CLASS_DISCOUNT", V.DataView.dtOrders!dvUpload(0).CUSTOMER_PRICE_CLASS_DISCOUNT!FieldValFloat)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
									
					'we also need to take into account the new discount fields, ORDER_DISCOUNT, PRICE_CLASS_DISCOUNT, PRODUCT_LINE_DISCOUNT, APPLY_DISCOUNT here
					'don't do this if they are explicity setting the discount
					V.Local.bCalculateDiscount.Set(False)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, !=, 0, "OR", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRODUCT_LINE_DISCOUNT!FieldValFloat, !=, 0, V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, !=, 0)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).APPLY_DISCOUNT!FieldValTrim, !=, "N")
							F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).APPLY_DISCOUNT!FieldValTrim, =, "D")
								'if they have it set to use default, we need to check if they have the discount turned on for this pricing method
								F.Intrinsic.Control.If(V.Local.bDiscountQuotedPrice)
									'calculate it
									V.Local.bCalculateDiscount.Set(True)
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.Else
								'calculate it
								V.Local.bCalculateDiscount.Set(True)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.Control.If(V.Local.bCalculateDiscount)
							F.Intrinsic.Control.CallSub(CalculateDiscount, "ORDER_DISCOUNT", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, "PRICE_CLASS_DISCOUNT", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, "PRODUCT_LINE_DISCOUNT", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRODUCT_LINE_DISCOUNT!FieldValFloat, "ORIGINAL_PRICE", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat)
							
							'now set these values back to the table
							F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "ORDER_DISCOUNT_AMOUNT", V.Args.ORDER_DISCOUNT_AMOUNT, "PRICE_CLASS_DISCOUNT_AMOUNT", V.Args.PRICE_CLASS_DISCOUNT_AMOUNT, "PRODUCT_LINE_DISCOUNT_AMOUNT", V.Args.PRODUCT_LINE_DISCOUNT_AMOUNT, "DISCOUNT_PRICE", V.Args.DISCOUNTED_PRICE)
							
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).DISCOUNT_PRICE!FieldValFloat, =, 0)
						F.Data.DataView.SetValue("dtOrders", "dvUpload", V.Local.iLineCounter, "DISCOUNT_PRICE", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat)
					F.Intrinsic.Control.EndIf
					
					'set negative flag, zero price flag, format numbers for webimporter
					V.Local.fPrice.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat)
					F.Intrinsic.Control.If(V.Local.fPrice, <, 0)
						V.Local.bNegativePrice.Set(True)
						F.Intrinsic.Math.Abs(V.Local.fPrice, V.Local.fPrice)
						V.Local.bZeroItemPrice.Set(False)
					F.Intrinsic.Control.ElseIf(V.Local.fPrice, =, 0)
						V.Local.bZeroItemPrice.Set(True)
					F.Intrinsic.Control.Else
						V.Local.bZeroItemPrice.Set(False)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.Local.fPrice, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6)
					V.Local.sUnitPrice.Set(V.Args.CALLWRAPPER_DECIMAL)
					V.Local.sQuotedPrice.Set(V.Local.sUnitPrice)
					
					'OKAY
					'SO
					'If you set the extension to be different than quantity * quoted price, the system uses extension / quantity as the discount price
					'So we can use this to upload discounts
					'We will be discontinuing the LineTotalPrice/LINE_PRICE fields
					'They will be left in the table for now, to not cause issues with people's programs
					'Instead we will use the PriceBeforeDiscount field as the PRICE, and the actual price field as the final price field
					'F.Intrinsic.Math.Abs(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LINE_PRICE!FieldValFloat, V.Local.fExtension)
					
					F.Intrinsic.Math.Abs(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).CURRENT_PRICE_TOTAL!FieldValFloat, V.Local.fExtension)
					F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.Local.fExtension, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6)
					V.Local.sExtension.Set(V.Args.CALLWRAPPER_DECIMAL)
					
					F.Intrinsic.Control.CallSub(GetPartAndRev, "FULL_PART", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim)
					V.Local.sLocation.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PartLoc!FieldValTrim)
					
					'DPI override location option
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Update_Order!FieldVal, =, False)
						F.Intrinsic.Control.If(V.Local.bLocationOverride)
							'check if the part is a drop ship part
							F.Intrinsic.String.Build("select top 1 RTRIM(IsNull(DROP_SHIP, 'N')) from V_INVENTORY_MST3 where PART = '{0}' and RTRIM(IsNull(DROP_SHIP, 'N')) = 'Y'", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, V.Local.sSQL)
							F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
							F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
							F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sDropShip)
							F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
							
							F.Intrinsic.Control.If(V.Local.sDropShip.Trim, !=, "Y")
								F.Intrinsic.String.Build("Running DPISelectLocation on {0} {1} line {2}.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, V.Local.sMessage)
								F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						
								F.Intrinsic.Control.CallSub(DPISelectLocation, "Part", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, "Zipcode", V.DataView.dtOrders!dvUpload(0).ShipToZip!FieldValTrim, "ExternalOrderNumber", V.Local.sExternalID, "Line", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "Type", V.Local.sType, "Quantity", V.Local.fQuantity)
								F.Intrinsic.Control.CallSub(AddLog, "Message", V.Args.Status)
								F.Intrinsic.Control.If(V.Args.Location.IsNotCancel)
									V.Local.sLocation.Set(V.Args.Location)
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.Else
								'if it's a drop ship, set the location to DS
								V.Local.sLocation.Set("DS")
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataTable.AddRow("ORDUPLLines", "QtyOrdered", V.Local.sQuantity, "PartNumber", V.Args.PART, "PartRev", V.Args.REV, "PartLoc", V.Local.sLocation, "QuotedPrice", V.Local.sQuotedPrice, "LineOrderDate", V.Local.dDate.FormatYYYYMMDD, "LinePromiseDate", V.Local.dDueDate.FormatYYYYMMDD, "UserField1", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).UserField1Line!FieldValTrim, "UserField2", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).UserField2Line!FieldValTrim, "UserField3", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).UserField3Line!FieldValTrim, "UserField4", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).UserField4Line!FieldValTrim, "UserField5", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).UserField5Line!FieldValTrim, "Extension", V.Local.sExtension, "TextLine1", V.Local.sExtraText, "TaxStatusFlag", V.Local.sFinalTaxFlag, "LineType", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).LineType!FieldValTrim, "NegativeFlag", V.Local.bNegativeQuantity.Long, "PriceFlag", V.Local.bZeroItemPrice.Long, "DataType", "T", "UM", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_PART_UM!FieldValTrim, "PL", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PRODUCT_LINE!FieldValTrim, "LineNumber", V.Local.sLine)
					
					'if not allowing core price override, set the override price
					F.Intrinsic.Control.If(V.Local.bCorePricing.Not)
						F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6)
						V.Local.sOverridePrice.Set(V.Args.CALLWRAPPER_DECIMAL)
						F.Data.DataTable.SetValue("ORDUPLLines", V.DataTable.ORDUPLLines.RowCount--, "OverridePrice", V.Local.sOverridePrice)
						
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat, =, 0)
							F.Data.DataTable.SetValue("ORDUPLLines", V.DataTable.ORDUPLLines.RowCount--, "PriceFlag", 1)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
			F.Intrinsic.Control.EndIf
			
			'check if we failed
			F.Intrinsic.Control.If(V.Local.bFailed.Not)
			
				'add the total tax line if the option is on
				F.Intrinsic.Control.If(V.Local.bTaxLine)
					F.Data.DataTable.Compute("dtOrders", "SUM(LineTaxes)", V.Local.sFilter, V.Local.fTaxes)
					F.Intrinsic.Control.If(V.Local.fTaxes, >, 0)
						F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.Local.fTaxes, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6)
						V.Local.sUnitPrice.Set(V.Args.CALLWRAPPER_DECIMAL)
						V.Local.sExtension.Set(V.Local.sUnitPrice)
						
						F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", 1, "BEFORE_DECIMAL", 9, "AFTER_DECIMAL", 4)
						V.Local.sQuantity.Set(V.Args.CALLWRAPPER_DECIMAL)
						
						V.Local.dDueDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDueDate!FieldVal)
						V.Local.dDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDate!FieldVal)
						
						F.Intrinsic.String.Build("Adding TAX line on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						
						F.Data.DataTable.AddRow("ORDUPLLines", "QtyOrdered", V.Local.sQuantity, "PartNumber", "TAX", "QuotedPrice", V.Local.sUnitPrice, "Extension", V.Local.sExtension, "LineOrderDate", V.Local.dDate.FormatYYYYMMDD, "LinePromiseDate", V.Local.dDueDate.FormatYYYYMMDD, "LineType", "S")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'maybe add an option for this
				F.Data.DataTable.Compute("dtOrders", "SUM(DISCOUNT)", V.Local.sFilter, V.Local.fDiscount)
				F.Intrinsic.Control.If(V.Local.fDiscount, !=, 0)
				
					F.Intrinsic.Control.If(V.Local.fDiscount, <, 0)
						V.Local.bNegativePrice.Set(True)
						V.Local.bNegativeDiscount.Set(True)
						F.Intrinsic.Math.Abs(V.Local.fDiscount, V.Local.fDiscount)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", V.Local.fDiscount, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6)
					V.Local.sUnitPrice.Set(V.Args.CALLWRAPPER_DECIMAL)
					V.Local.sExtension.Set(V.Local.sUnitPrice)
					
					F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "VALUE", 1, "BEFORE_DECIMAL", 9, "AFTER_DECIMAL", 4)
					V.Local.sQuantity.Set(V.Args.CALLWRAPPER_DECIMAL)
					
					V.Local.dDueDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDueDate!FieldVal)
					V.Local.dDate.Set(V.DataView.dtOrders!dvUpload(0).OrderDate!FieldVal)
					
					F.Intrinsic.String.Build("Adding DISCOUNT line on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					
					F.Data.DataTable.AddRow("ORDUPLLines", "QtyOrdered", V.Local.sQuantity, "PartNumber", "DISCOUNT", "QuotedPrice", V.Local.sUnitPrice, "Extension", V.Local.sExtension, "LineOrderDate", V.Local.dDate.FormatYYYYMMDD, "LinePromiseDate", V.Local.dDueDate.FormatYYYYMMDD, "LineType", "S")
				F.Intrinsic.Control.EndIf
				
				'set the total discount fields
				F.Data.DataTable.Compute("dtOrders", "SUM(TOTAL_ORER_DISCOUNT_AMOUNT)", V.Local.sFilter, V.Local.fSum)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "ORDER_DISCOUNT_AMOUNT_ORDER_TOTAL", V.Local.fSum)
				
				F.Data.DataTable.Compute("dtOrders", "SUM(TOTAL_PRICE_CLASS_DISCOUNT_AMOUNT)", V.Local.sFilter, V.Local.fSum)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL", V.Local.fSum)
				
				F.Data.DataTable.Compute("dtOrders", "SUM(TOTAL_PRODUCT_LINE_DISCOUNT_AMOUNT)", V.Local.sFilter, V.Local.fSum)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL", V.Local.fSum)
				
				'make sure web importer is set up
				F.Intrinsic.Control.CallSub(CheckORDUPLParameterFile)
				
				'create and backup the file
				F.Intrinsic.String.Build("Creating upload ORDUPL file for {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				F.Intrinsic.Control.CallSub(ORDUPLCreateFile)
				F.Intrinsic.Control.CallSub(BackupFiles)
				
				'run the actual upload
				F.Intrinsic.String.Build("Running upload ORDUPL for {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				F.Intrinsic.Control.CallSub(ORDUPLSync)
				
				'get results
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
					F.Intrinsic.String.Build("select RTRIM(QUOTE_NO) from V_QUOTE_HEADER where QUOTE_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Build("select RTRIM(ORDER_NO) from V_ORDER_HEADER where ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
				F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
				
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF, =, True, "OR", V.Local.bFailed, =, True)
			
				'make sure to clear tables
				F.Data.DataTable.DeleteRow("ORDUPL", -1)
				F.Data.DataTable.AcceptChanges("ORDUPL")
				F.Data.DataTable.DeleteRow("ORDUPLExtra", -1)
				F.Data.DataTable.AcceptChanges("ORDUPLExtra")
				F.Data.DataTable.DeleteRow("ORDUPLLines", -1)
				F.Data.DataTable.AcceptChanges("ORDUPLLines")
				
				'write feedback and log
				F.Intrinsic.Control.If(V.Local.bSetFeedback)
					F.Intrinsic.String.Build("{3} for external {2} {0} failed with message: {1}", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sFeedback, V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.CallSub(GetORDUPLErrorMessage)
					F.Intrinsic.String.Build("{3} for external {2} {0} failed with message: {1}", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Args.ORDUPL_ERROR.Trim, V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "Feedback", V.Local.sMessage, "FAILED", True, "LOG", False)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				
				'add something here to clear configurator records
				F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
				F.Intrinsic.String.Build("update GCG_5807_CNFG_STAGE set PROCESSED = 1, FAILED = 1, FEEDBACK = '{1}' where EXTERNAL_ORDER = '{0}' and PROCESSED = 0;", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sMessage, V.Local.sSQL)
				F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				F.Intrinsic.String.Build("delete from ORDER_CONFIG where ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
				F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
			
			F.Intrinsic.Control.Else	
				'success
				
				F.Intrinsic.Control.If(V.Local.sTransaction, =, "Update")
					V.Global.iUpdated.Set(V.Global.iUpdated.++)
				F.Intrinsic.Control.Else
					V.Global.iUploaded.Set(V.Global.iUploaded.++)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.String.Build("Successful {3} of {2} {0} from external order {1}.", V.Local.sNumber, V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sType, V.Local.sTransaction, V.Local.sMessage)
				F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "OrderNumber", V.Local.sNumber, "FeedBack", V.Local.sMessage, "GSS_CustomerNo", V.DataView.dtOrders!dvUpload(0).Final_Customer!FieldValTrim, "OrderLocation", V.DataView.dtOrders!dvUpload(0).FINAL_LOCATION!FieldValTrim)
				F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				
				F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
				
				'update processed flag
				F.Intrinsic.String.Build("update GCG_5807_ORDER_STAGE set PROCESSED = 1 where ORDER_NO_EXTERNAL = '{0}' and PROCESSED = 0", V.DataTable.dtOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sSQL)
				F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				F.Intrinsic.Control.If(V.Global.bExtendedLogging)
					F.Intrinsic.String.Build("Updating extra {0} Fields", V.Local.sType, V.Local.sMessage)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				F.Intrinsic.Control.EndIf
				
				'update extra Fields not part of the webimporter if there are any
				
				'fix markshipment... for some reason this is getting defaulted to the ship to attention sometimes
				F.Global.General.ReadOption(401750, 0, False, V.Local.bMarkShipment)
				F.Intrinsic.Control.If(V.Local.bMarkShipment)
					V.Local.sTemp.Set(V.DataView.dtOrders!dvUpload(0).MarkShipment!FieldValTrim)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set MARK_INFO = '{0}' where RECORD_TYPE = 'A' and QUOTE_NO = '{1}'", V.Local.sTemp.PSQLFriendly, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set MARK_INFO = '{0}' where RECORD_TYPE = 'A' and ORDER_NO = '{1}'", V.Local.sTemp.PSQLFriendly, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
					
				'update ship via
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, !=, "")
					'header records
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set SHIP_VIA = '{0}' where RECORD_TYPE = 'A' and QUOTE_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set SHIP_VIA = '{0}' where RECORD_TYPE = 'A' and ORDER_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					
					'ship to records
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_SHIP_TO set SHIP_VIA_SHIP = '{0}' where RECORD_TYPE = 'C' and QUOTE_NO = '{1}' and QUOTE_SHIP_ID = '{2}'", V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_SHIP_TO set SHIP_VIA_SHIP = '{0}' where RECORD_TYPE = 'C' and ORDER_NO = '{1}' and ORDER_SHIP_ID = '{2}'", V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				'update carrier, service type
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, !=, "")
					'header records
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set CARRIER_CD = '{0}', SRVC_TYPE = {2} where RECORD_TYPE = 'A' and QUOTE_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).SERVICE_TYPE!FieldValLong, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set CARRIER_CD = '{0}', SRVC_TYPE = {2} where RECORD_TYPE = 'A' and ORDER_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).SERVICE_TYPE!FieldValLong, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					
					'ship to records
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_SHIP_TO set CARRIER_CD = '{0}', SHIP_SRVC_TYPE = {3} where RECORD_TYPE = 'C' and QUOTE_NO = '{1}' and QUOTE_SHIP_ID = '{2}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.DataView.dtOrders!dvUpload(0).SERVICE_TYPE!FieldValLong, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_SHIP_TO set CARRIER_CD = '{0}', SHIP_SRVC_TYPE = {3} where RECORD_TYPE = 'C' and ORDER_NO = '{1}' and ORDER_SHIP_ID = '{2}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.DataView.dtOrders!dvUpload(0).SERVICE_TYPE!FieldValLong, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
						
				'terms message
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).FINAL_TERMS_MESSAGE!FieldValTrim, !=, "")
					V.Local.sTerms.Set(V.DataView.dtOrders!dvUpload(0).FINAL_TERMS_MESSAGE!FieldValTrim)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set TERMS = '{0}' where RECORD_TYPE = 'A' and QUOTE_NO = '{1}'", V.Local.sTerms.PSQLFriendly, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set TERMS = '{0}' where RECORD_TYPE = 'A' and ORDER_NO = '{1}'", V.Local.sTerms.PSQLFriendly, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				'update bill to phone
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).BILLTOPHONE!FieldValTrim, !=, "", "AND", V.DataView.dtOrders!dvUpload(0).ShipToContactPhone!FieldValTrim, =, "")
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_BILL_TO set CONTACT_PHONE = '{0}' where RECORD_TYPE = 'B' and QUOTE_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).BILLTOPHONE!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_BILL_TO set CONTACT_PHONE = '{0}' where RECORD_TYPE = 'B' and ORDER_NO = '{1}'", V.DataView.dtOrders!dvUpload(0).BILLTOPHONE!FieldValTrim, V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				'update sales order header comments
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).AddlCommentsHead!FieldValTrim, !=, "")
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.Control.CallSub(SaveOrderComments, "NUMBER", V.Local.sNumber, "Quote", True, "COMMENTS", V.DataView.dtOrders!dvUpload(0).AddlCommentsHead!FieldValTrim)
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.CallSub(SaveOrderComments, "NUMBER", V.Local.sNumber, "Quote", False, "COMMENTS", V.DataView.dtOrders!dvUpload(0).AddlCommentsHead!FieldValTrim)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'fix empty due dates
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).OrderDueDate!FieldVal, =, V.Ambient.MinDate)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set DATE_DUE = '000000', DATE_DUE_CNV = '000000' where QUOTE_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set DATE_DUE = '000000', DATE_DUE_CNV = '000000' where ORDER_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				'update do not override freight flag
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).NO_OVERRIDE_FREIGHT!FieldVal)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "O")
						F.Intrinsic.String.Build("update ORDER_LINES set NO_OVR_RIDE_FRT = 'Y' where RTRIM(LINE_TYPE) = 'F' and RTRIM(RECORD_TYPE) = 'L' and ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
						F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'update sales order line comments
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvUpload.RowCount--, 1)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).AddlCommentsLine!FieldValTrim, !=, "")
						F.Intrinsic.Math.Add(V.Local.iLineCounter, 1, V.Local.iLine)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
							F.Intrinsic.Control.CallSub(SaveOrderLineComments, "NUMBER", V.Local.sNumber, "Line", V.Local.iLine, "Quote", True, "COMMENTS", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).AddlCommentsLine!FieldValTrim)
						F.Intrinsic.Control.Else
							F.Intrinsic.Control.CallSub(SaveOrderLineComments, "NUMBER", V.Local.sNumber, "Line", V.Local.iLine, "Quote", False, "COMMENTS", V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).AddlCommentsLine!FieldValTrim)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				
				'apparently web importer does not upload progress bill lines which is... frustrating
				F.Intrinsic.String.Build("{0} and [LineType] = 'P'", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvProgressBillLines", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvProgressBillLines.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvProgressBillLines(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					F.Intrinsic.String.Build("update ORDER_LINES set LINE_TYPE = '{0}' where RECORD_TYPE = 'L' and RECORD_NO = '{1}' and ORDER_NO = '{2}'", V.DataView.dtOrders!dvProgressBillLines(V.Local.iLineCounter).LineType!FieldValTrim, V.Local.sLine, V.Local.sNumber, V.Local.sSQL)
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating progress bill line {0} for {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvProgressBillLines")
				
				'update negative prices if there are any
				F.Intrinsic.Control.If(V.Local.bNegativePrice)
					F.Intrinsic.String.Build("{0} and [FINAL_UNIT_PRICE] < 0", V.Local.sFilter, V.Local.sSubFilter)
					F.Data.DataView.Create("dtOrders", "dvNegativePrice", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
					F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvNegativePrice.RowCount--, 1)
						F.Intrinsic.String.LPad(V.DataView.dtOrders!dvNegativePrice(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
						V.Local.sLine.Append("0")
						
						F.Intrinsic.Math.Mult(V.DataView.dtOrders!dvNegativePrice(V.Local.iLineCounter).FINAL_UNIT_PRICE!FieldValFloat, V.DataView.dtOrders!dvNegativePrice(V.Local.iLineCounter).QtyOrdered!FieldValFloat, V.Local.fExtension)
						
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
							F.Intrinsic.String.Build("update ORDER_LINES set PRICE = 0 - PRICE, DISCOUNT_PRICE = 0 - DISCOUNT_PRICE, EXTENSION = 0 - EXTENSION, PRICE_QUOTE = 0 - PRICE_QUOTE, PRICE_DISC_ORD = 0 - PRICE_DISC_ORD, EXTENSION_QUOTE = 0 - EXTENSION_QUOTE where RECORD_TYPE = 'L' and RECORD_NO = '{1}' and QUOTE_NO = '{0}'", V.Local.sNumber, V.Local.sLine, V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("update ORDER_LINES set PRICE = 0 - PRICE, DISCOUNT_PRICE = 0 - DISCOUNT_PRICE, EXTENSION = 0 - EXTENSION, PRICE_ORDER = 0 - PRICE_ORDER, PRICE_DISC_ORD = 0 - PRICE_DISC_ORD, EXTENSION_ORDER = 0 - EXTENSION_ORDER where RECORD_TYPE = 'L' and RECORD_NO = '{1}' and ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sLine, V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
						
						F.Intrinsic.String.Build("Updating negative price for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.Next(V.Local.iLineCounter)
					F.Data.DataView.Close("dtOrders", "dvNegativePrice")
					
					F.Intrinsic.Control.If(V.Local.bNegativeDiscount)
						F.Intrinsic.String.Build("Updating negative price for DISCOUNT line on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
							F.Intrinsic.String.Build("update ORDER_LINES set PRICE = 0 - PRICE, DISCOUNT_PRICE = 0 - DISCOUNT_PRICE, EXTENSION = 0 - EXTENSION, PRICE_QUOTE = 0 - PRICE_QUOTE, PRICE_DISC_ORD = 0 - PRICE_DISC_ORD, EXTENSION_QUOTE = 0 - EXTENSION_QUOTE where RECORD_TYPE = 'L' and PART = 'DISCOUNT' and QUOTE_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("update ORDER_LINES set PRICE = 0 - PRICE, DISCOUNT_PRICE = 0 - DISCOUNT_PRICE, EXTENSION = 0 - EXTENSION, PRICE_ORDER = 0 - PRICE_ORDER, PRICE_DISC_ORD = 0 - PRICE_DISC_ORD, EXTENSION_ORDER = 0 - EXTENSION_ORDER where RECORD_TYPE = 'L' and PART = 'DISCOUNT' and ORDER_NO = '{0}'", V.Local.sNumber, V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
						
					F.Intrinsic.Control.EndIf
					V.Local.bNegativeDiscount.Set(False)
				F.Intrinsic.Control.EndIf
				V.Local.bNegativePrice.Set(False)
				
				'update GL account
				F.Intrinsic.String.Build("{0} and IsNull(GL_ACCOUNT, '') <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvGLAccount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvGLAccount.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvGLAccount(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
						
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvGLAccount(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set GL_ACCOUNT = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvGLAccount(V.Local.iLineCounter).GL_ACCOUNT!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set GL_ACCOUNT = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvGLAccount(V.Local.iLineCounter).GL_ACCOUNT!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.Build("Updating GL Account for line {0} to {3} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvGLAccount(V.Local.iLineCounter).GL_ACCOUNT!FieldValTrim, V.Local.sMessage)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvGLAccount")
				
				'update PL since WI doesn't seem to
				F.Intrinsic.String.Build("{0} and IsNull(PRODUCT_LINE, '') <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvPL", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvPL.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvPL(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
						
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvPL(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set PRODUCT_LINE = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvPL(V.Local.iLineCounter).PRODUCT_LINE!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set PRODUCT_LINE = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvPL(V.Local.iLineCounter).PRODUCT_LINE!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvPL")
				
				'update price code
				F.Intrinsic.String.Build("{0} and CONFIGURED_PRICE = True", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvConfiguredPrices", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvConfiguredPrices.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvConfiguredPrices(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
						
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvConfiguredPrices(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set PRICE_CODE = 12 where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{1}'", V.Local.sNumber, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set PRICE_CODE = 12 where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{1}'", V.Local.sNumber, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvConfiguredPrices")
				
				'update descriptions
				F.Intrinsic.String.Build("{0} and TRIM(IsNull([PartDescription], '')) <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvDescriptions", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvDescriptions.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvDescriptions(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					V.Local.sPart.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim)
					V.Local.sDescription.Set(V.DataView.dtOrders!dvUpload(V.Local.iLineCounter).PartDescription!FieldValTrim)
					
					'obviously shouldn't have to check this, but I'm seeing it be an issue
					F.Intrinsic.Control.If(V.Local.sDescription.Trim, !=, "")
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvDescriptions(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
							F.Intrinsic.String.Build("update QUOTE_LINES set DESCRIPTION = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and PART = '{2}'", V.Local.sNumber, V.Local.sDescription.PSQLFriendly, V.Local.sPart.PSQLFriendly, V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("update ORDER_LINES set DESCRIPTION = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and PART = '{2}'", V.Local.sNumber, V.Local.sDescription.PSQLFriendly, V.Local.sPart.PSQLFriendly, V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.Control.If(V.Global.bExtendedLogging)
							F.Intrinsic.String.Build("Updating description for part {0} on {1} {2}.", V.Local.sPart, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
							F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Intrinsic.Control.EndIf
							
						F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvDescriptions")
				
				'update customer part
				F.Intrinsic.String.Build("{0} and TRIM(IsNull([CUSTOMER_PART], '')) <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvCustomerParts", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvCustomerParts.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvCustomerParts(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					V.Local.sPart.Set(V.DataView.dtOrders!dvCustomerParts(V.Local.iLineCounter).CUSTOMER_PART!FieldValTrim)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvCustomerParts(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set CUSTOMER_PART = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.Local.sPart.PSQLFriendly, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set CUSTOMER_PART = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.Local.sPart.PSQLFriendly, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating Customer Part for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvCustomerParts")
				
				'update discount fields here
				'order discount
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([TOTAL_ORER_DISCOUNT_AMOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount.RowCount, >, 0)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set AMT_DISC_ORD_QUOTE = {1} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).ORDER_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set AMT_DISC_ORD_ORDER = {1} where ORDER_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).ORDER_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'F.Intrinsic.String.Build("{0} and IsNull([PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount.RowCount, >, 0)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set AMT_DISC_PR_CL_ORD = {1} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set AMT_DISC_PR_CL_ORD = {1} where ORDER_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).PRICE_CLASS_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'F.Intrinsic.String.Build("{0} and IsNull([PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount.RowCount, >, 0)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set AMT_DISC_PROD_LN_ORD = {1} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set AMT_DISC_PROD_LN_ORD = {1} where ORDER_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(0).PRODUCT_LINE_DISCOUNT_AMOUNT_ORDER_TOTAL!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'F.Intrinsic.String.Build("{0} and IsNull([ORDER_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([ORDER_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvDiscount.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set DISCOUNT = {1}, QUOTE_DISC_AMT = {3} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_ORER_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set DISCOUNT = {1}, ORDER_DISC_AMT = {3} where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_ORER_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating Order Discount to {3} for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).ORDER_DISCOUNT!FieldValFloat, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'price class discount
				'F.Intrinsic.String.Build("{0} and IsNull([PRICE_CLASS_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([PRICE_CLASS_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvDiscount.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set PRICE_CLASS_DISC = {1}, PRCCLS_DISC_AMT = {3} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_PRICE_CLASS_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set PRICE_CLASS_DISC = {1}, PRCCLS_DISC_AMT = {3} where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_PRICE_CLASS_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating Price Class Discount to {3} for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRICE_CLASS_DISCOUNT!FieldValFloat, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'product line discount
				'F.Intrinsic.String.Build("{0} and IsNull([PRODUCT_LINE_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.If(V.Local.bCorePricing)
					F.Intrinsic.String.Build("{0} and IsNull([PRODUCT_LINE_DISCOUNT], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Intrinsic.Control.Else
					V.Local.sSubFilter.Set(V.Local.sFilter)
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvDiscount.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set PROD_LINE_DISC = {1}, PRDLN_DISC_AMT = {3} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRODUCT_LINE_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_PRODUCT_LINE_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set PROD_LINE_DISC = {1}, PRDLN_DISC_AMT = {3} where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRODUCT_LINE_DISCOUNT!FieldValFloat, V.Local.sLine, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TOTAL_PRODUCT_LINE_DISCOUNT_AMOUNT!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating Product Line Discount to {3} for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).PRODUCT_LINE_DISCOUNT!FieldValFloat, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'apply discount field
				F.Intrinsic.String.Build("{0} and Trim(IsNull([APPLY_DISCOUNT], '')) <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvDiscount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvDiscount.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set FLAG_ALWAYS_DISCOUNT = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).APPLY_DISCOUNT!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set FLAG_ALWAYS_DISCOUNT = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).APPLY_DISCOUNT!FieldValTrim, V.Local.sLine, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating Apply Discount flag to {4} for line {0} on {1} {2}.", V.Local.sLine, V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvDiscount(V.Local.iLineCounter).APPLY_DISCOUNT!FieldValTrim, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvDiscount")
				
				'update additional discount fields
				F.Intrinsic.Control.If(V.Local.bCorePricing.Not)
					F.Intrinsic.Control.CallSub(UpdateAdditionalPricingFields)
				F.Intrinsic.Control.EndIf
				
				'allocate lines if necessary
				F.Intrinsic.String.Build("{0} and IsNull([QUANTITY_TO_PURCHASE], 0) <> 0 and TransactionCode = 'O'", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvAllocated", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.For(V.Local.iLineCounter, 0, V.DataView.dtOrders!dvAllocated.RowCount--, 1)
					F.Intrinsic.String.LPad(V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).SET_LINE_NUMBER!FieldValLong, "0", 3, V.Local.sLine)
					V.Local.sLine.Append("0")
					
					F.Intrinsic.Control.CallSub(AllocatePart, "Order", V.Local.sNumber, "Line", V.Local.sLine, "Part", V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).GSS_PartNumber!FieldValTrim, "Location", V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).PartLoc!FieldValTrim, "Quantity", V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).QUANTITY_TO_PURCHASE!FieldValFloat, "OrderType", V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).OrderType!FieldValTrim, "PromiseDate", V.DataView.dtOrders!dvAllocated(V.Local.iLineCounter).LINE_PROMISE_DATE!FieldVal)
					
				F.Intrinsic.Control.Next(V.Local.iLineCounter)
				F.Data.DataView.Close("dtOrders", "dvAllocated")
				
				'update freight GL account
				F.Intrinsic.String.Build("{0} and IsNull(FREIGHT_GL_ACCOUNT, '') <> ''", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvFreightGLAccount", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvFreightGLAccount.RowCount, >, 0)
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvFreightGLAccount(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set GL_ACCOUNT = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'L' and LINE_TYPE = 'F'", V.Local.sNumber, V.DataView.dtOrders!dvFreightGLAccount(0).FREIGHT_GL_ACCOUNT!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set GL_ACCOUNT = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'L' and LINE_TYPE = 'F'", V.Local.sNumber, V.DataView.dtOrders!dvFreightGLAccount(0).FREIGHT_GL_ACCOUNT!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.Build("Updating GL Account for freight line to {2} on {0} {1}.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvFreightGLAccount(0).FREIGHT_GL_ACCOUNT!FieldValTrim, V.Local.sMessage)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				F.Data.DataView.Close("dtOrders", "dvFreightGLAccount")
				
				'update shipping hold flag
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipHold!FieldVal)
					'first need to check if this customer has the option on to allow order level ship hold modifications
					F.Intrinsic.String.Build("select RTRIM(SHP_HLD_OVRD) from V_CUST_FORM_INFO where CUSTOMER = '{0}'", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sSQL)
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Attempting to update ship hold flag on {0} {1}. Checking customer ship hold options for customer {2}", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					
					F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
						'this should not happen, customer is checked earlier
						F.Intrinsic.String.Build("Failed to update ship hold flag on {0} {1} because customer V_CUST_FORM_INFO record for customer {2} could not be found when checking customer shipping hold options.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						
					F.Intrinsic.Control.Else
						'check return, update it if option is on
						F.Intrinsic.Control.If(V.Local.sRet.Trim, =, "Y")
							F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
								F.Intrinsic.String.Build("update QUOTE_HEADER set SHP_HLD_FLAG = '04' where QUOTE_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.Local.sSQL)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Build("update ORDER_HEADER set SHP_HLD_FLAG = '04' where ORDER_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.Local.sSQL)
							F.Intrinsic.Control.EndIf
							
							F.Intrinsic.Control.If(V.Global.bExtendedLogging)
								F.Intrinsic.String.Build("Updating ship hold flag on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
								F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
							F.Intrinsic.Control.EndIf
							
							F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
							F.ODBC.Connection!Con.Execute(V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("Failed to update ship hold flag on {0} {1} because the option is not set to allow order level shipping hold for customer {2}.", V.Local.sType, V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sMessage)
							F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'update quote status
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
					F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "QUOTE", "NAME", "OVERRIDE_STATUS")
					F.Intrinsic.Control.If(V.Args.Setting.Ucase.Trim, =, "", OR, V.Args.Setting.Ucase.Trim, =, "DO NOT OVERRIDE")
						V.Local.sStatus.Set(V.DataView.dtOrders!dvUpload(0).QUOTE_STATUS!FieldValTrim)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set(V.Args.Setting.UCase.Trim)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.SelectCase(V.Local.sStatus)
						F.Intrinsic.Control.Case("IN PROCESS")
							V.Local.sStatus.Set("O")
						F.Intrinsic.Control.Case("SUBMITTED")
							V.Local.sStatus.Set("S")
						F.Intrinsic.Control.Case("APPROVED")
							V.Local.sStatus.Set("A")
						F.Intrinsic.Control.Case("SENT")
							V.Local.sStatus.Set("P")
						F.Intrinsic.Control.CaseElse
							V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndSelect
					
					F.Intrinsic.Control.If(V.Local.sStatus.Trim, !=, "")
						'update the QUOTE_TYPE Field in QUOTE_HEADER
						
						F.Intrinsic.Control.If(V.Global.bExtendedLogging)
							F.Intrinsic.String.Build("Updating status for quote {0}", V.Local.sNumber, V.Local.sMessage)
							F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.String.Build("update QUOTE_HEADER set QUOTE_TYPE = '{0}' where RECORD_TYPE = 'A' and QUOTE_NO = '{1}'", V.Local.sStatus, V.Local.sNumber, V.Local.sSQL)
						F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'update commission type
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).COMMISSION_TYPE_CODE!FieldValTrim, !=, "")
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set TYPE_COMMISSION = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).COMMISSION_TYPE_CODE!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set TYPE_COMMISSION = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).COMMISSION_TYPE_CODE!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating commission type on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				
				'update FOB
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).FOB_POINT!FieldValTrim, !=, "")
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_HEADER set CODE_FOB = '{1}' where QUOTE_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FOB_POINT!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_HEADER set CODE_FOB = '{1}' where ORDER_NO = '{0}' and RECORD_TYPE = 'A'", V.Local.sNumber, V.DataView.dtOrders!dvUpload(0).FOB_POINT!FieldValTrim, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bExtendedLogging)
						F.Intrinsic.String.Build("Updating FOB on {0} {1}.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf	
				
				'update line cost
				F.Intrinsic.String.Build("{0} and IsNull([LineUnitCost], 0) <> 0", V.Local.sFilter, V.Local.sSubFilter)
				F.Data.DataView.Create("dtOrders", "dvCost", 22, V.Local.sSubFilter, "SET_LINE_NUMBER")
				F.Intrinsic.Control.If(V.DataView.dtOrders!dvCost.RowCount, >, 0)
					
					F.Intrinsic.Control.If(V.DataView.dtOrders!dvCost(0).TransactionCode!FieldValTrim, =, "Q")
						F.Intrinsic.String.Build("update QUOTE_LINES set COST = {1} where QUOTE_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvCost(0).LineUnitCost!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("update ORDER_LINES set COST = {1} where ORDER_NO = '{0}' and RECORD_TYPE = 'L'", V.Local.sNumber, V.DataView.dtOrders!dvCost(0).LineUnitCost!FieldValFloat, V.Local.sSQL)
					F.Intrinsic.Control.EndIf
						
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
				F.Data.DataView.Close("dtOrders", "dvCost")
				
				'check DPI BOm locations, only for orders
				F.Intrinsic.Control.If(V.Local.bDPIBomLocation, =, True, "AND", V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "O")
					'check if there is a BOM on the order
					F.Intrinsic.String.Build("select top 1 ORDER_NO from V_ORDER_LINES where ORDER_NO = '{0}' and FLAG_BOM in ('Y', 'C')", V.Local.sNumber, V.Local.sSQL)
					F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					
					F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
						'there are BOM parts on the order, call the Bom location script
						F.Global.General.SetPassedDataElement("ORDER_NUMBER", V.Local.sNumber)
						F.Global.General.SetPassedDataElement("EXTERNAL_ORDER_NUMBER", V.Local.sExternalID)
						F.Global.General.SetPassedDataElement("ZIPCODE", V.DataView.dtOrders!dvUpload(0).ShipToZip!FieldValTrim)
						
						F.Intrinsic.String.Build("Running advanced option DPI_BOM_LOCATION script [GCG_5807_SetOrderBOMLocationsDPI.g2u] for order [{0}] because a BOM part was found on the order.", V.Local.sNumber, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
						F.Global.General.CallSyncGAS(V.Local.sDPIBomLocationScript)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Global.bExtendedLogging)
					F.Intrinsic.String.Build("Additional field updates for {0} {1} complete.", V.Local.sType, V.Local.sNumber, V.Local.sMessage)
					F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
				F.Intrinsic.Control.EndIf
				
				'email salesperson if that option is on
				F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ORDER", "NAME", "EMAIL_SALESPERSON")
				F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
					F.Intrinsic.Control.If(V.Args.Setting)
						F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).TransactionCode!FieldValTrim, =, "O")
							F.Intrinsic.Control.CallSub(EmailOrderToSalesperson, "ORDER", V.Local.sNumber, "SALESPERSON", V.DataView.dtOrders!dvUpload(0).SalespersonCode!FieldValTrim, "EXTERNAL_ORDER", V.Local.sExternalID)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				'log upload
				F.Intrinsic.Control.If(V.Global.bPostUploadLogging)
					F.Intrinsic.Control.CallSub(LogUpload, "ORDER_NUMBER", V.DataView.dtOrders!dvUpload(0).FINAL_ORDER_NUMBER!FieldValTrim)
				F.Intrinsic.Control.EndIf
	
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtOrders", "dvUpload")
F.Data.DataTable.Close("dtOrderNumbers")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UploadStagedOrders.End

Program.Sub.UpdateAdditionalPricingFields.Start
F.Intrinsic.Control.Try

'EXTENSION
'AMT_DISCOUNT
'PRICE_DISC_ORD
'AMT_DISC_ORDER
'DISCOUNT_PRICE
'EXTENSION_ORDER
'MARGIN

V.Local.iCounter.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.fExtension.Declare(Float)
V.Local.fDiscountAmount.Declare(Float)
V.Local.fDiscountPrice.Declare(Float)
V.Local.fPrice.Declare(Float)
V.Local.fMargin.Declare(Float)
V.Local.fCost.Declare(Float)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtOrders!dvUpload.RowCount--, 1)
	F.Intrinsic.Math.Round(V.DataView.dtOrders!dvUpload(V.Local.iCounter).CURRENT_PRICE_TOTAL!FieldValFloat, 2, V.Local.fExtension)
	F.Intrinsic.Math.Round(V.DataView.dtOrders!dvUpload(V.Local.iCounter).DISCOUNT_AMOUNT_TOTAL!FieldValFloat, 2, V.Local.fDiscountAmount)
	F.Intrinsic.Math.Round(V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_UNIT_PRICE!FieldValFloat, 4, V.Local.fPrice)
	F.Intrinsic.Math.Round(V.DataView.dtOrders!dvUpload(V.Local.iCounter).DISCOUNT_PRICE!FieldValFloat, 4, V.Local.fDiscountPrice)
	
	F.Intrinsic.String.Build("update ORDER_LINES set EXTENSION = {0}, EXTENSION_ORDER = {0}, AMT_DISCOUNT = {1}, AMT_DISC_ORDER = {1}, DISCOUNT_PRICE = {2}, PRICE_DISC_ORD = {2}, PRICE = {5}, PRICE_ORDER = {5} where ORDER_NO = '{3}' and RECORD_TYPE = 'L' and RECORD_NO = '{4}'", V.Local.fExtension, V.Local.fDiscountAmount, V.Local.fDiscountPrice, V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_ORDER_STRING!FieldValTrim, V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_LINE_STRING!FieldValTrim, V.Local.fPrice, V.Local.sSQL)
	
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	F.Intrinsic.Control.If(V.Local.fDiscountAmount, !=, 0)
	
		'Add the udpate for the margin as well. Margin in the formula is in decimal format, but represented as a percentage (*100) in the tables.
		'Margin = (-(Cost/Discounted Price) + 1) * 100
	
		'Retrieve the cost
		F.Intrinsic.String.Build("Select COST from ORDER_LINES where ORDER_NO = '{0}' and RECORD_NO = '{1}' and RECORD_TYPE = 'L'", V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_ORDER_STRING!FieldValTrim, V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_LINE_STRING!FieldValTrim, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.fCost)
		
		F.Intrinsic.Math.Div(V.Local.fCost, V.DataView.dtOrders!dvUpload(V.Local.iCounter).DISCOUNT_PRICE!FieldValFloat, V.Local.fMargin)
		F.Intrinsic.Math.Mult(V.Local.fMargin, -1, V.Local.fMargin)
		F.Intrinsic.Math.Add(V.Local.fMargin, 1, V.Local.fMargin)
		F.Intrinsic.Math.Mult(V.Local.fMargin, 100, V.Local.fMargin)
		F.Intrinsic.Math.Round(V.Local.fMargin, 4, V.Local.fMargin)
		
		F.Intrinsic.String.Build("update ORDER_LINES set MARGIN = {0} where ORDER_NO = '{1}' and RECORD_TYPE = 'L' and RECORD_NO = '{2}'", V.Local.fMargin, V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_ORDER_STRING!FieldValTrim, V.DataView.dtOrders!dvUpload(V.Local.iCounter).FINAL_LINE_STRING!FieldValTrim, V.Local.sSQL)
		
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UpdateAdditionalPricingFields.End

Program.Sub.GrabCustomerDiscounts.Start
F.Intrinsic.Control.Try

F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_ORDER_DISCOUNT", "Float", 0)
F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_PRICE_CLASS", "String", "")
F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_PRICE_CLASS_DISCOUNT", "Float", 0)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(CUSTOMER), DISCOUNT from V_CUSTOMER_SHIPTO")
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(CUSTOMER), DISCOUNT from V_CUSTOMER_SHIPTO")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "FINAL_CUSTOMER", "CUSTOMER_ORDER_DISCOUNT")
F.Data.Dictionary.Close("dictTemp")

F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(CUSTOMER), PRICE_CLASS from V_CUSTOMER_SALES")
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(CUSTOMER), PRICE_CLASS from V_CUSTOMER_SALES")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "FINAL_CUSTOMER", "CUSTOMER_PRICE_CLASS")
F.Data.Dictionary.Close("dictTemp")

F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(PRC_CODE), PRC_CLASS_DSCT from V_PRICE_CLASS_DSCT")
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(PRC_CODE), PRC_CLASS_DSCT from V_PRICE_CLASS_DSCT")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "CUSTOMER_PRICE_CLASS", "CUSTOMER_PRICE_CLASS_DISCOUNT")
F.Data.Dictionary.Close("dictTemp")

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.GrabCustomerDiscounts.End

Program.Sub.CalculateDiscount.Start
'figure out the discount based on the ORDER_DISCOUNT, PRICE_CLASS_DISCOUNT, and PRODUCT_LINE_DISCOUNT fields
'pass ORDER_DISCOUNT, PRICE_CLASS_DISCOUNT, PRODUCT_LINE_DISCOUNT, ORIGINAL_PRICE
'returns DISCOUNTED_PRICE, ORDER_DISCOUNT_AMOUNT, PRICE_CLASS_DISCOUNT_AMOUNT, PRODUCT_LINE_DISCOUNT_AMOUNT

F.Intrinsic.Control.Try

V.Local.iApplication.Declare(Long)
V.Local.iOrderDiscountSequence.Declare(Long)
V.Local.iPriceClassDiscountSequence.Declare(Long)
V.Local.iProductLineDiscountSequence.Declare(Long)
V.Local.sMessage.Declare(String)
V.Local.fPercentage.Declare(Float, 0)
V.Local.iCounter.Declare(Long)
V.Local.iPrice.Declare(Float, 0)
V.Local.iDiscountAmount.Declare(Float, 0)

'maybe check apply total discount to unit price option

'first figure out if we should apply the discount (do that in the calling sub)

'read application option
'1 - Combine, 2 - Apply in Order, 3 - Apply One
F.Global.General.ReadOption(402607, 3, 0, V.Local.iApplication)

'application order
F.Global.General.ReadOption(401563, 3, 0, 0, V.Local.iOrderDiscountSequence)
F.Global.General.ReadOption(401563, 3, 0, 1, V.Local.iPriceClassDiscountSequence)
F.Global.General.ReadOption(401563, 3, 0, 2, V.Local.iProductLineDiscountSequence)

F.Data.DataTable.Create("dtDiscountOptions")
F.Data.DataTable.AddColumn("dtDiscountOptions", "TYPE", "String")
F.Data.DataTable.AddColumn("dtDiscountOptions", "ORDER", "Long")
F.Data.DataTable.AddColumn("dtDiscountOptions", "PERCENTAGE", "Float")
F.Data.DataTable.AddColumn("dtDiscountOptions", "DISCOUNTED", "Float")
F.Data.DataTable.AddExpressionColumn("dtDiscountOptions", "DISCOUNTED_FINAL", "Float", "DISCOUNTED * -1")

F.Data.DataTable.AddRow("dtDiscountOptions", "TYPE", "ORDER_DISCOUNT", "ORDER", V.Local.iOrderDiscountSequence, "PERCENTAGE", V.Args.ORDER_DISCOUNT)
F.Data.DataTable.AddRow("dtDiscountOptions", "TYPE", "PRICE_CLASS_DISCOUNT", "ORDER", V.Local.iPriceClassDiscountSequence, "PERCENTAGE", V.Args.PRICE_CLASS_DISCOUNT)
F.Data.DataTable.AddRow("dtDiscountOptions", "TYPE", "PRODUCT_LINE_DISCOUNT", "ORDER", V.Local.iProductLineDiscountSequence, "PERCENTAGE", V.Args.PRODUCT_LINE_DISCOUNT)

F.Data.DataView.Create("dtDiscountOptions", "dvDiscountOptions", 22, "PERCENTAGE <> 0", "ORDER")

F.Intrinsic.Control.SelectCase(V.Local.iApplication)
	F.Intrinsic.Control.Case(1)
		'take out each percentage from original price
		V.Local.iPrice.Set(V.Args.Original_Price)
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtDiscountOptions!dvDiscountOptions.RowCount--, 1)
			F.Intrinsic.Math.Mult(V.DataView.dtDiscountOptions!dvDiscountOptions(V.Local.iCounter).PERCENTAGE!FieldValFloat, V.Args.Original_Price, V.Local.iDiscountAmount)
			F.Intrinsic.Math.Sub(V.Local.iPrice, V.Local.iDiscountAmount, V.Local.iPrice)
			F.Data.DataView.SetValue("dtDiscountOptions", "dvDiscountOptions", V.Local.iCounter, "DISCOUNTED", V.Local.iDiscountAmount)
		F.Intrinsic.Control.Next(V.Local.iCounter)
		
	F.Intrinsic.Control.Case(2)
		'apply the percentages in order
		V.Local.iPrice.Set(V.Args.Original_Price)
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtDiscountOptions!dvDiscountOptions.RowCount--, 1)
			F.Intrinsic.Math.Mult(V.DataView.dtDiscountOptions!dvDiscountOptions(V.Local.iCounter).PERCENTAGE!FieldValFloat, V.Local.iPrice, V.Local.iDiscountAmount)
			F.Intrinsic.Math.Sub(V.Local.iPrice, V.Local.iDiscountAmount, V.Local.iPrice)
			F.Data.DataView.SetValue("dtDiscountOptions", "dvDiscountOptions", V.Local.iCounter, "DISCOUNTED", V.Local.iDiscountAmount)
		F.Intrinsic.Control.Next(V.Local.iCounter)
		
	F.Intrinsic.Control.Case(3)
		'just apply the top one
		F.Intrinsic.Math.Mult(V.DataView.dtDiscountOptions!dvDiscountOptions(0).PERCENTAGE!FieldValFloat, V.Args.Original_Price, V.Local.iDiscountAmount)
		F.Intrinsic.Math.Sub(V.Args.Original_Price, V.Local.iDiscountAmount, V.Local.iPrice)
		F.Data.DataView.SetValue("dtDiscountOptions", "dvDiscountOptions", 0, "DISCOUNTED", V.Local.iDiscountAmount)
	
	F.Intrinsic.Control.CaseElse
		F.Intrinsic.String.Build("Error calculating discount. Invalid application type selected [{0}]. Please select a proper application type in the Discount Options section of System Support > Administration > Company Options (Standard) > Order Entry.", V.Local.iApplication, V.Local.sMessage)
		F.Intrinsic.Control.Callsub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndSelect
F.Data.DataView.Close("dtDiscountOptions", "dvDiscountOptions")

'return
F.Intrinsic.Variable.AddRV("DISCOUNTED_PRICE", V.Local.iPrice)
F.Intrinsic.Variable.AddRV("ORDER_DISCOUNT_AMOUNT", V.DataTable.dtDiscountOptions(0).DISCOUNTED_FINAL!FieldValFloat)
F.Intrinsic.Variable.AddRV("PRICE_CLASS_DISCOUNT_AMOUNT", V.DataTable.dtDiscountOptions(1).DISCOUNTED_FINAL!FieldValFloat)
F.Intrinsic.Variable.AddRV("PRODUCT_LINE_DISCOUNT_AMOUNT", V.DataTable.dtDiscountOptions(2).DISCOUNTED_FINAL!FieldValFloat)

F.Data.DataTable.Close("dtDiscountOptions")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.CalculateDiscount.End

Program.Sub.LogUpload.Start
'we have issues with customers saying that a field was not upload, but we go check and it seems to have uploaded fine
'maybe they change it before we look, it's hard to tell.
'So here we will log the uploaded data directly after the upload so we have some evidence
'pass ORDER_NUMBER

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.iJ.Declare(Long)
V.Local.iK.Declare(Long)
V.Local.sPath.Declare(String)
V.Local.sFields.Declare(String)
V.Local.sTables.Declare(String, "V_ORDER_HEADER*!*V_ORDER_LINES*!*V_ORDER_BILL_TO*!*V_ORDER_CONFIG*!*V_ORDER_LN_TEXT*!*V_ORDER_HF_TEXT*!*V_SALES_ORD_COM*!*V_ORDER_BLANKET_XREF*!*V_ORDER_BOOKING*!*V_ORDER_CHANGES*!*V_ORDER_CHG_LINES*!*V_ORDER_CHG_SHIPTO*!*V_ORDER_REPAIR*!*V_ORDER_TAX")
V.Local.sKeys.Declare(String, "ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NUM*!*ORDER_NUMBER*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO*!*ORDER_NO")

'build log datatable
F.Data.DataTable.Create("dtUploadLog", True)
F.Data.DataTable.AddColumn("dtUploadLog", "TABLE", "String", "")
F.Data.DataTable.AddColumn("dtUploadLog", "FIELD", "String", "")
F.Data.DataTable.AddColumn("dtUploadLog", "RECORD", "String", "")
F.Data.DataTable.AddColumn("dtUploadLog", "VALUE", "String", "")

F.Intrinsic.String.Split(V.Local.sTables, "*!*", V.Local.sTables)
F.Intrinsic.String.Split(V.Local.sKeys, "*!*", V.Local.sKeys)

F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sTables.UBound, 1)
	F.Intrinsic.String.Build("select * from {0} where {1} = '{2}'", V.Local.sTables(V.Local.iCounter), V.Local.sKeys(V.Local.iCounter), V.Args.ORDER_NUMBER, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtUploadLogTemp", "Con", V.Local.sSQL)
	
	F.Intrinsic.String.Split(V.DataTable.dtUploadLogTemp.FieldNames, "*!*", V.Local.sFields)
	F.Intrinsic.Control.For(V.Local.iJ, 0, V.DataTable.dtUploadLogTemp.RowCount--, 1)
		
		F.Intrinsic.Control.For(V.Local.iK, 0, V.Local.sFields.UBound, 1)
			F.Data.DataTable.AddRow("dtUploadLog", "TABLE", V.Local.sTables(V.Local.iCounter), "FIELD", V.Local.sFields(V.Local.iK), "RECORD", V.Local.iJ, "VALUE", V.DataTable.dtUploadLogTemp(V.Local.iJ).[V.Local.sFields(V.Local.iK)]!FieldVal)
		F.Intrinsic.Control.Next(V.Local.iK)
		
	F.Intrinsic.Control.Next(V.Local.iJ)
	V.Local.sFields.Redim(0, 0)
	
	F.Data.DataTable.Close("dtUploadLogTemp")
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

V.Local.sTables.Redim(0, 0)
V.Local.sKeys.Redim(0, 0)

'now save that to a file
F.Intrinsic.Control.CallSub(BackUpDataTable, "DataTable", "dtUploadLog", "Type", "Post Upload Order", "Name", V.Args.Order_Number, "DataView", "")
F.Data.DataTable.Close("dtUploadLog")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.LogUpload.End

Program.Sub.AllocatePart.Start
'allocate the part on the sales order line
'pass ORDER, LINE, PART, LOCATION, QUANTITY

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sDescription.Declare(String)
V.Local.sMessage.Declare(String)

F.Intrinsic.Control.CallSub(Connection, "Connect", True)

'first check if the part is a lot bin part
F.Intrinsic.String.Build("select RTRIM(IsNull(FLAG_LOT, 'N')) from V_INVENTORY_MSTR where PART = '{0}' and LOCATION = '{1}'", V.Args.Part.PSQLFriendly, V.Args.Location.Trim, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	'this shouldn't happen
	F.Intrinsic.String.Build("Error allocating part [{2}] at location [{3}] for line {0} on order {1}: Part does not exist.", V.Args.Line, V.Args.Order, V.Args.Part, V.Args.Location, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "Y")
		F.Intrinsic.String.Build("Error allocating part [{2}] at location [{3}] for line {0} on order {1}: Part is not flagged for lot/bin.", V.Args.Line, V.Args.Order, V.Args.Part, V.Args.Location, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Allocating part [{2}] at location [{3}] with quantity [{4}] for line {0} on order {1}...", V.Args.Line, V.Args.Order, V.Args.Part, V.Args.Location, V.Args.Quantity, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
		
		'now allocate
		'update order lines purchased flag
		F.Intrinsic.String.Build("update ORDER_LINES set FLAG_PURCHASED = 'Y' where RECORD_TYPE = 'L' and ORDER_NO = '{0}' and RECORD_NO = '{1}'", V.Args.Order, V.Args.Line, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
		
		'update sales order com table
		F.Intrinsic.String.Build("select top 1 * from SALES_ORD_COM where ORDER_NO = '{0}' and ORDER_LINE = '{1}' and SEQ = '000'", V.Args.Order, V.Args.Line, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtAllocate", "Con", V.Local.sSQL)
		
		F.Data.DataTable.DeleteRow("dtAllocate")
		F.Data.DataTable.AcceptChanges("dtAllocate")
		
		'grab description
		F.Intrinsic.String.Build("select RTRIM(DESCRIPTION) from V_INVENTORY_MSTR where PART = '{0}' and LOCATION = '{1}'", V.Args.Part.PSQLFriendly, V.Args.Location, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sDescription)

		F.Data.DataTable.AddRow("dtAllocate", "ORDER_NO", V.Args.Order, "ORDER_LINE", V.Args.Line, "SEQ", "000", "PO", "0000000", "PO_LINE", "0000", "PART", V.Args.Part, "LOC", V.Args.Location, "DESCR", V.Local.sDescription, "QTY_ORD", V.Args.Quantity, "SO_PROM_DATE", V.Args.PromiseDate.FormatYYYYMMDD, "PO_DUE_DATE", "00000000", "TYPE_ORDER", V.Args.OrderType, "USERID_ORD", V.Caller.User, "QTY_PO", 0, "QTY_RECVD", 0)
		
		F.Data.DataTable.SaveToDB("dtAllocate", "Con", "SALES_ORD_COM", "ORDER_NO*!*ORDER_LINE*!*SEQ", 256)
		
		F.Data.DataTable.Close("dtAllocate")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.AllocatePart.End

Program.Sub.CarrierShipViaCheck.Start
'if the carrier is set and the ship via is not, pull the ship via from the carrier
'if neither is passed, pull them from the customer

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sShipVia.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sCustomerShipVia.Declare(String)
V.Local.sShipToID.Declare(String)
V.Local.sCustomerCarrier.Declare(String)
V.Local.iCarrier.Declare(Long)

F.Intrinsic.Control.CallSub(Connection, "Connect", True)

F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, !=, "")
	F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, =, "")
		'grab the ship via for the carrier
		F.Intrinsic.String.Build("select top 1 B.MESSAGE from OE_CARRIER A left join SHIP_VIA B on A.VIA = B.ID where CARRIER_CD = '{0}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sShipVia)
		
		F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "ShipVia", V.Local.sShipVia.Trim)
		
		F.Intrinsic.Control.If(V.Global.bExtendedLogging)
			F.Intrinsic.String.Build("Overriding empty Ship Via from Carrier to [{0}] on external order [{1}]", V.Local.sShipVia, V.DataView.dtOrders!dvUpload(0).Order_No_External!FieldValTrim, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	V.Local.sShipVia.Redim(0, 1)
	F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, =, "")
		'if using a ship to ID, grab it from there
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, !=, "")
			F.Intrinsic.String.Build("select RTRIM(A.CARRIER_CD), RTRIM(B.MESSAGE) from V_OE_MULTI_SHIP A left join V_SHIP_VIA B on A.SHIP_VIA = B.ID where A.CUSTOMER = '{0}' and A.SHIP_SEQ = '{1}'", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipToID!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sShipToID)
			
			F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
				F.Intrinsic.String.Split(V.Local.sShipToID, "*!*", V.Local.sShipToID)
				
				F.Intrinsic.Control.If(V.Local.sShipToID(0).Trim, !=, "")
					V.Local.sShipVia(0).Set(V.Local.sShipToID(0))
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Local.sShipToID(1).Trim, !=, "")
					V.Local.sShipVia(1).Set(V.Local.sShipToID(1))
				F.Intrinsic.Control.EndIf
				
				V.Local.sShipToID.Redim(0, 0)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Local.sShipVia(0).Trim, =, "")
			'grab carrier code from customer
			F.Intrinsic.String.Build("select RTRIM(A.CARRIER_CD), C.MESSAGE from V_CUST_FORM_INFO A left join OE_CARRIER B on A.CARRIER_CD = B.CARRIER_CD left join V_SHIP_VIA C on B.VIA = C.ID where A.CUSTOMER = '{0}'", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sCustomerCarrier)
			
			F.Intrinsic.String.Split(V.Local.sCustomerCarrier, "*!*", V.Local.sCustomerCarrier)
			V.Local.sCustomerCarrier.RedimPreserve(0, 1)
			V.Local.sShipVia(0).Set(V.Local.sCustomerCarrier(0))
			
			
			F.Intrinsic.String.Build("select B.MESSAGE from V_CUSTOMER_SHIPTO A left join V_SHIP_VIA B on A.SHIP_VIA = B.ID where A.CUSTOMER = '{0}'", V.DataView.dtOrders!dvUpload(0).FINAL_CUSTOMER!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sCustomerShipVia)
			
			F.Intrinsic.Control.If(V.Local.sShipVia(1).Trim, =, "")
				F.Intrinsic.Control.If(V.Local.sCustomerShipVia.Trim, !=, "")
					V.Local.sShipVia(1).Set(V.Local.sCustomerShipVia)
				F.Intrinsic.Control.Else
					V.Local.sShipVia(1).Set(V.Local.sCustomerCarrier(1))
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			V.Local.sCustomerCarrier.Redim(0, 0)
		F.Intrinsic.Control.EndIf
	
		F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "ShipVia", V.Local.sShipVia(1).Trim, "CARRIER", V.Local.sShipVia(0).Trim)
		
		F.Intrinsic.Control.If(V.Global.bExtendedLogging)
			F.Intrinsic.String.Build("Overriding empty Ship Via and Carrier to [{0}] and [{1}] on external order [{2}]", V.Local.sShipVia(1).Trim, V.Local.sShipVia(0).Trim, V.DataView.dtOrders!dvUpload(0).Order_No_External!FieldValTrim, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		V.Local.sShipVia.Redim(0, 0)
		
		'maybe check default carrier as well
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'grab the service type for the carrier
F.Intrinsic.String.Build("select top 1 A.SRVC_TYPE from V_OE_CARRIER A left join V_SHIP_VIA B on A.VIA = B.ID where A.CARRIER_CD = '{0}' and B.MESSAGE = '{1}'", V.DataView.dtOrders!dvUpload(0).Carrier!FieldValTrim, V.DataView.dtOrders!dvUpload(0).ShipVia!FieldValTrim, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.iCarrier)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)

	F.Intrinsic.Control.If(V.Global.bExtendedLogging)
		F.Intrinsic.String.Build("Overriding service type to [{0}] on external order [{1}]", V.DataView.dtOrders!dvUpload(0).SERVICE_TYPE!FieldValLong, V.DataView.dtOrders!dvUpload(0).Order_No_External!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Intrinsic.Control.EndIf

	F.Data.DataView.SetValue("dtOrders", "dvUpload", -1, "SERVICE_TYPE", V.Local.iCarrier)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.CarrierShipViaCheck.End

Program.Sub.SaveOrderComments.Start
'save AddlCommentsHead to ORDER_HF_TEXT based on options
'pass NUMBER
'pass boolean QUOTE
'pass COMMENTS

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sTable.Declare(String)
V.Local.sKeyField.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sType.Declare(String)

F.Intrinsic.Control.If(V.Args.Quote.Not)
	V.Local.sTable.Set("ORDER_HF_TEXT")
	V.Local.sKeyField.Set("ORDER_NUMBER")
	V.Local.sType.Set("Order")
F.Intrinsic.Control.Else
	V.Local.sTable.Set("QUOTE_HF_TEXT")
	V.Local.sKeyField.Set("QUOTE_NO")
	V.Local.sType.Set("Quote")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

F.Intrinsic.String.Build("select RTRIM({1}) {1}, RTRIM(TEXT) TEXT from {0} where {1} = '{2}' and TEXT = '***TEMPORARY-FILLER-COMMENT***'", V.Local.sTable, V.Local.sKeyField, V.Args.Number.Trim, V.Local.sSQL)

F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.String.Build("Checking comments for {0} {1}.", V.Local.sType, V.Args.Number, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtCommentsTemp", "Con", V.Local.sSQL)

F.Intrinsic.Control.If(V.DataTable.dtCommentsTemp.RowCount, >, 0)
	F.Data.DataTable.SetValue("dtCommentsTemp", 0, "TEXT", V.Args.Comments.Trim)
	
	F.Intrinsic.Control.If(V.Global.bExtendedLogging)
		F.Intrinsic.String.Build("Updating comments for {0} {1}.", V.Local.sType, V.Args.Number, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SaveToDB("dtCommentsTemp", "Con", V.Local.sTable, V.Local.sKeyField, 256)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Failed to find comments for {0} {1}. Comments will not be uploaded.", V.Local.sType, V.Args.Number, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf
F.Data.DataTable.Close("dtCommentsTemp")

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.SaveOrderComments.End

Program.Sub.SaveOrderLineComments.Start
'save AddlCommentsLineto ORDER_LN_TEXT 
'pass NUMBER
'pass LINE (integer)
'pass boolean QUOTE
'pass COMMENTS

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sTable.Declare(String)
V.Local.sKeyField.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sType.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sLineField.Declare(String)
V.Local.sTypeField.Declare(String)
V.Local.sKeys.Declare(String)

F.Intrinsic.Control.If(V.Args.Quote.Not)
	V.Local.sTable.Set("ORDER_LN_TEXT")
	V.Local.sKeyField.Set("ORDER_NUM")
	V.Local.sLineField.Set("ORDER_LINE")
	V.Local.sTypeField.Set("ORDER_TYPE")
	V.Local.sType.Set("Order")
F.Intrinsic.Control.Else
	V.Local.sTable.Set("QUOTE_LN_TEXT")
	V.Local.sKeyField.Set("QUOTE_NUMBER")
	V.Local.sLineField.Set("QUOTE_LINE")
	V.Local.sTypeField.Set("QUOTE_TYPE")
	V.Local.sType.Set("Quote")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.LPad(V.Args.Line, "0", 3, V.Local.sLine)
F.Intrinsic.String.RPad(V.Local.sLine, "0", 4, V.Local.sLine)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

F.Intrinsic.String.Build("select RTRIM({1}) {1}, RTRIM({3}) {3}, {5}, RTRIM(TEXT) TEXT from {0} where {1} = '{2}' and {3} = '{4}' and {5} = 9999 and TEXT = '***TEMPORARY-FILLER-COMMENT***'", V.Local.sTable, V.Local.sKeyField, V.Args.Number.Trim, V.Local.sLineField, V.Local.sLine, V.Local.sTypeField, V.Local.sSQL)

F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.String.Build("Checking comments for {0} {1} line {2}.", V.Local.sType, V.Args.Number, V.Local.sLine, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtCommentsTemp", "Con", V.Local.sSQL)

F.Intrinsic.Control.If(V.DataTable.dtCommentsTemp.RowCount, >, 0)
	F.Data.DataTable.SetValue("dtCommentsTemp", 0, "TEXT", V.Args.Comments.Trim)
	
	F.Intrinsic.Control.If(V.Global.bExtendedLogging)
		F.Intrinsic.String.Build("Updating comments for {0} {1} line {2}.", V.Local.sType, V.Args.Number, V.Local.sLine, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}", V.Local.sKeyField, V.Local.sLineField, V.Local.sTypeField, V.Local.sKeys)
	F.Data.DataTable.SaveToDB("dtCommentsTemp", "Con", V.Local.sTable, V.Local.sKeys, 256)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Failed to find comments for {0} {1} line {2}. Comments will not be uploaded.", V.Local.sType, V.Args.Number, V.Local.sLine, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf
F.Data.DataTable.Close("dtCommentsTemp")

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.SaveOrderLineComments.End

Program.Sub.BackupFiles.Start
'grab the upload file that was created and make a backup of it in Global\Custom\5807\ccc\Backups\Order

F.Intrinsic.Control.Try

V.Local.sFiles.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)

'use the ORDUPL.Lib subroutine to retrieve the order directory
F.Intrinsic.Control.CallSub(ORDUPLGetWebOrderDirectory)
F.Intrinsic.Control.If(V.Args.Path.Trim, !=, "FILENOTFOUND")
	
	'the directory from the param file may or may not end with a slash
	F.Intrinsic.Control.If(V.Args.Path.Right1, !=, "\")
		F.Intrinsic.String.Build("{0}\", V.Args.Path, V.Local.sPath)
	F.Intrinsic.Control.Else
		V.Local.sPath.Set(V.Args.Path)
	F.Intrinsic.Control.EndIf
	
	'copy files
	F.Intrinsic.File.GetFileList(V.Local.sPath, V.Local.sFiles)
	F.Intrinsic.String.Split(V.Local.sFiles, ":", V.Local.sFiles)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFiles.UBound, 1)
		F.Intrinsic.String.Build("{0}{1}", V.Local.sPath, V.Local.sFiles(V.Local.iCounter), V.Local.sFile)
		F.Intrinsic.Control.CallSub(BackupFile, "Type", "Web Importer", "File", V.Local.sFile)
	F.Intrinsic.Control.Next(V.Local.iCounter)
	V.Local.sFiles.Redim(0, 0)
	
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Attempt to back up upload file failed because the Web Importer settings file GSSPARAMS{0} was not found.", V.Caller.CompanyCode, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.BackupFiles.End

Program.Sub.EmailOrderToSalesperson.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sParameters.Declare(String)
V.Local.sPath.Declare(String)
V.Local.iBIRun.Declare(Long)
V.Local.iBILog.Declare(Long)
V.Local.iBIRet.Declare(Long)
V.Local.sSubject.Declare(String)
V.Local.sBody.Declare(String, "Order Acknowledgement attached.")
V.Local.sSender.Declare(String)
V.Local.sAttachment.Declare(String)
V.Local.sParameterNames.Declare(String, "TERMINAL*!*REPORTID*!*INCLUDESTAX*!*DEC*!*COMMENTS")
V.Local.bExists.Declare(Boolean)
V.Local.sFile.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sRecipient.Declare(String)
V.Local.bExtension.Declare(Boolean, False)
V.Local.iReportID.Declare(Long)

'check if option is on to print extension, as this is a different report ID
F.Global.General.ReadOption(401605, 0, False, 1, V.Local.bExtension)
F.Intrinsic.Control.If(V.Local.bExtension)
	V.Local.iReportID.Set(54)
F.Intrinsic.Control.Else
	V.Local.iReportID.Set(52)
F.Intrinsic.Control.EndIf

F.Global.BI.GetRunID(V.Local.iBIRun)
F.Global.BI.StartLogging(V.Local.iBIRun, V.Local.iReportID, -1, "", V.Local.iBILog)

'use 910050 library to generate sales order data, use crystal override so it does not print
'could also use CallWrapperSyncBIO instead of library with crystal override
F.Data.DataTable.AddRow("910050", "ORDER", V.Args.ORDER, "MODE", "P", "FILLER", "|~|CRYSTAL-OVERRIDE|~|")
F.Intrinsic.Control.CallSub(910050Sync)

'build path to store pdf
F.Intrinsic.String.Build("{0}\CUSTOM\5807\{1}\Order Acknowledgements", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sPath)
F.Intrinsic.String.Build("{0}\{1}.pdf", V.Local.sPath, V.Args.Order, V.Local.sFile)

'build parameters
F.Intrinsic.String.Build("{0}*!*0000{1}*!**!**!*", V.Caller.Terminal, V.Local.iReportID, V.Local.sParameters)

'print report
F.Global.BI.StopLogging(V.Local.iBILog)
F.Global.BI.RunReportPreProcessor(V.Local.iBIRun, V.Local.iBILog, V.Local.sParameterNames, V.Local.sParameters, "", 4, True, "", 5, "", 0, V.Local.sFile, "", V.Local.iBIRet)

'if successful, send email
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.SalesPerson.Trim, !=, "")
		'grab salesperson email
		F.Intrinsic.String.Build("select RTRIM(NAME), RTRIM(EMAIL) from V_SALESPERSONS where ID = '{0}'", V.Args.SalesPerson.Trim, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
			F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
			
			F.Intrinsic.Control.If(V.Local.sRet(1).Trim, !=, "")
			
				'build Subject
				F.Intrinsic.String.Build("Global Shop Order {0} created from external order {1}.", V.Args.Order.Trim, V.Args.External_Order.Trim, V.Local.sSubject)
				
				'build sender / receipient.
				F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sRet(1).Trim, V.Local.sRet(0).Trim, V.Local.sSender)
				F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sRet(0).Trim, V.Local.sRet(1).Trim, V.Local.sRecipient)
				
				'build attachment
				F.Intrinsic.File.GetFileNameFromFQN(V.Local.sFile, V.Local.sFile)
				F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sFile, V.Local.sPath, V.Local.sAttachment)
				
				'send email
				F.Intrinsic.String.Build("Emailing order acknowledgement of order {0} to {1}.", V.Args.Order.Trim, V.Local.sRet(1).Trim, V.Local.sMessage)
				F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, 0, "5807 Uploader", V.Local.sSubject, V.Local.sSender, V.Local.sRecipient, V.Local.sBody, -1, "", False, "", "", "", "", "", "", "", V.Local.sAttachment, False)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("Failed to email order acknowledgement of order {0} because salesperson {1} has no email set up.", V.Args.Order.Trim, V.Args.Salesperson.Trim, V.Local.sMessage)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Failed to email order acknowledgement of order {0} because salesperson {1} was not found.", V.Args.Order.Trim, V.Args.Salesperson.Trim, V.Local.sMessage)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Failed to email order acknowledgement of order {0} because no salesperson was passed.", V.Args.Order.Trim, V.Local.sMessage)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Failed to email order acknowledgement of order {0} because report failed to print.", V.Args.Order.Trim, V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.EmailOrderToSalesperson.End

Program.Sub.SaveFeedback.Start
'save any calculated Fields as well as results back to the staging table

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sMap.Declare(String)

F.Data.DataTable.SetValue("dtOrders", -1, "Processed", True)
F.Data.DataTable.AddColumn("dtOrders", "PROCESSED_TIMESTAMP", "Date", V.Ambient.Now)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

'update staging table
V.Local.sMap.Set("RecordID@!@RecordID*!*GSS_CustomerNo@!@GSS_CustomerNo*!*OrderNumber@!@OrderNumber*!*SET_LINE_NUMBER@!@LineNumber*!*Processed@!@Processed*!*Failed@!@Failed*!*Feedback@!@Feedback*!*Update_Order@!@Update_Order*!*Processed_Timestamp@!@Processed_Timestamp")
F.Data.DataTable.SaveToDB("dtOrders", "Con", "GCG_5807_ORDER_STAGE", "RecordID", 256, V.Local.sMap)

F.Data.DataView.Create("dtOrders", "dvAllOrderNumbers", 22)
F.Data.DataView.ToDataTableDistinct("dtOrders", "dvAllOrderNumbers", "dtAllOrderNumbers", "Order_No_External")
F.Data.DataView.Close("dtOrders", "dvAllOrderNumbers")

'update review table
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtAllOrderNumbers.RowCount--, 1)
	F.Intrinsic.String.Build("update GCG_5807_REVIEW set PROCESSED = 1 where EXTERNAL_ORDER = '{0}' and PROCESSED = 0", V.DataTable.dtAllOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'update configurator staging
	'this only matters for failed records
'	F.Intrinsic.String.Build("update GCG_5807_CNFG_STAGE set PROCESSED = 1, FAILED = 1 where EXTERNAL_ORDER = '{0}' and PROCESSED = 0;", V.DataTable.dtAllOrderNumbers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sSQL)
'	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
'	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.Next(V.Local.iCounter)
		
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.SaveFeedback.End

Program.Sub.LogFailedUploads.Start
'add fail message for each upload that failed

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long)
V.Local.sMessage.Declare(String)
V.Local.sFeedback.Declare(String)

F.Data.DataView.Create("dtOrders", "dvFailed", 22, "Failed = True", "")
F.Data.DataView.ToDataTableDistinct("dtOrders", "dvFailed", "dtFailed", "Order_No_External*!*Feedback*!*Log")
F.Data.DataView.Close("dtOrders", "dvFailed")

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtFailed.RowCount--, 1)
	F.Intrinsic.Control.If(V.DataTable.dtFailed(V.Local.iCounter).LOG!FieldVal)
		V.Local.sFeedback.Set(V.DataTable.dtFailed(V.Local.iCounter).Feedback!FieldValTrim)
	
		'depending on where the failure message came from, it may be fully written
		F.Intrinsic.Control.If(V.Local.sFeedback.Left6, =, "Upload")
			V.Local.sMessage.Set(V.Local.sFeedback)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Upload for external order {0} failed with message: {1}", V.DataTable.dtFailed(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sFeedback, V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

V.Global.iFailed.Set(V.DataTable.dtFailed.RowCount)

F.Data.DataTable.Close("dtFailed")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.LogFailedUploads.End

Program.Sub.UploadCustomers.Start
'run customer uploader
'select to get new customer ids

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sMap.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.iInnerCounter.Declare(Long)
V.Local.sFilter.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sMessage.Declare(String)

'save records to customer staging table
F.Data.DataView.ToDataTable("dtOrders", "dvCheck", "dtCustomers", True)

'make sure no duplicates
F.Data.DataView.ToDataTableDistinct("dtOrders", "dvCheck", "dtCustomerList", "Ext_CustomerNo")
F.Data.DataView.Create("dtCustomers", "dvCustomerCheck")

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtCustomerList.RowCount--, 1)
	F.Intrinsic.String.Build("Ext_CustomerNo = '{0}'", V.DataTable.dtCustomerList(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtCustomers", "dvCustomerCheck", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.DataView.dtCustomers!dvCustomerCheck.RowCount, >, 1)
	
		F.Intrinsic.Control.For(V.Local.iInnerCounter, V.DataView.dtCustomers!dvCustomerCheck.RowCount--, 1, -1)
			F.Data.DataView.DeleteRow("dtCustomers", "dvCustomerCheck", V.Local.iInnerCounter)
		F.Intrinsic.Control.Next(V.Local.iInnerCounter)
		
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Data.DataTable.Close("dtCustomerList")

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

V.Local.sMap.Set("Ext_CustomerNo*!*FINAL_CUSTOMER_NAME*!*BillToAddress1*!*BillToAddress2*!*BillToAddress3*!*BillToAddress4*!*BillToAddress5*!*BillToCity*!*BillToState*!*BillToZip*!*BillToCountry*!*BillToAttention*!*BillToIntlFlag*!*ShipToName*!*ShipToAddress1*!*ShipToAddress2*!*ShipToAddress3*!*ShipToCity*!*ShipToState*!*ShipToZip*!*ShipToCountry*!*ShipToAttention*!*ShipToIntlFlag*!*SALESPERSONCODE*!*COMMISSION_TYPE_CODE*!*TERMS*!*CARRIER*!*BILLTOPHONE*!*SHIPTOCONTACTPHONE*!*SHIPTOCONTACTEMAIL")
F.Data.DataView.SetFilter("dtCustomers", "dvCustomerCheck", "")
F.Data.DataView.ToDataTableDistinct("dtCustomers", "dvCustomerCheck", "dtSaveCustomers", V.Local.sMap)
F.Data.DataView.Close("dtCustomers", "dvCustomerCheck")

'this is because these Fields are larger in the order uploader than the customer uploader
'for some reason in the web importer the bill to Fields are 40 even though they are 30 in the customer upload
'need to decrease the Field size in the database, do these for now
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_CUSTOMER_NAME", "String", "Substring([FINAL_CUSTOMER_NAME], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_SHIP_TO", "String", "Substring([ShipToAddress1], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_TO", "String", "Substring([BillToAddress1], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_SHIP_CITY", "String", "Substring([ShipToCity], 1, 15)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_CITY", "String", "Substring([BillToCity], 1, 15)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_TO_2", "String", "Substring([BillToAddress2], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_TO_3", "String", "Substring([BillToAddress3], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_TO_4", "String", "Substring([BillToAddress4], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_TO_5", "String", "Substring([BillToAddress5], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_BILL_PHONE", "String", "Substring([BILLTOPHONE], 1, 13)")
F.Data.DataTable.AddExpressionColumn("dtSaveCustomers", "TRIMMED_SHIP_PHONE", "String", "Substring([SHIPTOCONTACTPHONE], 1, 13)")

V.Local.sMap.Set("Ext_CustomerNo@!@EXTERNAL_CUSTOMER_ID*!*TRIMMED_CUSTOMER_NAME@!@CUSTOMER_NAME*!*TRIMMED_BILL_TO@!@ADDRESS_1*!*TRIMMED_BILL_TO_2@!@ADDRESS_2*!*TRIMMED_BILL_TO_3@!@ADDRESS_3*!*TRIMMED_BILL_TO_4@!@ADDRESS_4*!*TRIMMED_BILL_TO_5@!@ADDRESS_5*!*TRIMMED_BILL_CITY@!@CITY*!*BillToState@!@STATE*!*BillToZip@!@ZIP*!*BillToCountry@!@COUNTRY*!*BillToAttention@!@ATTENTION*!*BillToIntlFlag@!@INTERNATIONAL*!*ShipToName@!@SHIP_NAME*!*TRIMMED_SHIP_TO@!@SHIP_ADDRESS_1*!*ShipToAddress2@!@SHIP_ADDRESS_2*!*ShipToAddress3@!@SHIP_ADDRESS_3*!*TRIMMED_SHIP_CITY@!@SHIP_CITY*!*ShipToState@!@SHIP_STATE*!*ShipToZip@!@SHIP_ZIP*!*ShipToCountry@!@SHIP_COUNTRY*!*ShipToAttention@!@SHIP_ATTENTION*!*ShipToIntlFlag@!@SHIP_INTERNATIONAL*!*PROCESSED@!@PROCESSED*!*UPDATE_CUSTOMER@!@UPDATE_CUSTOMER*!*PROSPECT@!@PROSPECT*!*FAILED@!@FAILED*!*SALESPERSONCODE@!@SALESPERSON_CODE*!*COMMISSION_TYPE_CODE@!@COMMISSION_TYPE_CODE*!*TERMS@!@TERMS*!*CARRIER@!@CARRIER*!*TRIMMED_BILL_PHONE@!@PHONE*!*TRIMMED_SHIP_PHONE@!@SHIP_PHONE*!*SHIPTOCONTACTEMAIL@!@EMAIL")

F.Data.DataTable.AddColumn("dtSaveCustomers", "Processed", "Boolean", False)
F.Data.DataTable.AddColumn("dtSaveCustomers", "UPDATE_CUSTOMER", "Boolean", False)
F.Data.DataTable.AddColumn("dtSaveCustomers", "PROSPECT", "Boolean", False)
F.Data.DataTable.AddColumn("dtSaveCustomers", "FAILED", "Boolean", False)
F.Data.DataTable.AddColumn("dtSaveCustomers", "RECORD_TIMESTAMP", "Date", V.Ambient.Now)

F.Intrinsic.String.Build("{0} customers found to be created. Running customer upload...", V.DataTable.dtSaveCustomers.RowCount, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

F.Data.DataTable.SaveToDB("dtSaveCustomers", "Con", "GCG_5807_CUST_STAGE", "Ext_CustomerNo", 128, V.Local.sMap)
F.Data.DataTable.Close("dtSaveCustomers")
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

'call customer uploader
F.Global.General.SetPassedDataElement("FROM_ORDER", True)
F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Global.sCustomerUploaderScript, V.Local.sPath)
F.Global.General.CallSyncGAS(V.Local.sPath, V.Caller.Switches)
F.Global.General.ResetPassedDataElements

'grab new ids
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtOrders", "Field", "Ext_CustomerNo")
F.Intrinsic.Control.CallSub(GetExternalIDField, "TYPE", "CUSTOMER")

F.Intrinsic.Control.If(V.Args.Core_Field, !=, "***DONOTSTORE***")
	F.Intrinsic.String.Build("select RTRIM({0}) CUSTOMER_ID, RTRIM(CUSTOMER) CUSTOMER from {1} where {0} in ('{2}') and {0} <> ''", V.Args.Core_Field, V.Args.Core_Table, V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select RTRIM(EXTERNAL_CUSTOMER_ID) CUSTOMER_ID, RTRIM(GSS_CUSTOMER_NUMBER) CUSTOMER from GCG_5807_CUST_STAGE where EXTERNAL_CUSTOMER_ID in ('{0}') and GSS_CUSTOMER_NUMBER <> ''", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Data.DataTable.CreateFromSQL("dtIDs", "Con", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
F.Data.DataView.Create("dtIDs", "dvIDs", 22)

'write back to customers datatable
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtCustomers.RowCount--, 1)
	F.Intrinsic.String.Build("[CUSTOMER_ID] = '{0}'", V.DataTable.dtCustomers(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtIDs", "dvIDs", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.DataView.dtIDs!dvIDs.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtCustomers", V.Local.iCounter, "UPLOADED_CUSTOMER", V.DataView.dtIDs!dvIDs(0).CUSTOMER!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

'write back to order datatable
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtOrders.RowCount--, 1)
	F.Intrinsic.String.Build("[CUSTOMER_ID] = '{0}'", V.DataTable.dtOrders(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtIDs", "dvIDs", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.DataView.dtIDs!dvIDs.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtOrders", V.Local.iCounter, "UPLOADED_CUSTOMER", V.DataView.dtIDs!dvIDs(0).CUSTOMER!FieldValTrim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Data.DataView.Close("dtIDs", "dvIDs")
F.Data.DataTable.Close("dtIDs")

'grab customer feedback
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.String.Build("select RTRIM(EXTERNAL_CUSTOMER_ID), RTRIM(FEEDBACK) from GCG_5807_CUST_STAGE where EXTERNAL_CUSTOMER_ID in ('{0}') and PROCESSED_TIMESTAMP > DATEADD(DAY, -1, NOW()) order by PROCESSED_TIMESTAMP desc", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("dtOrders", "CUSTOMER_FEEDBACK", "String", "")
F.Data.DataTable.FillFromDictionary("dtOrders", "dictTemp", "Ext_CustomerNo", "CUSTOMER_FEEDBACK")
F.Data.DataTable.AddColumn("dtCustomers", "CUSTOMER_FEEDBACK", "String", "")
F.Data.DataTable.FillFromDictionary("dtCustomers", "dictTemp", "Ext_CustomerNo", "CUSTOMER_FEEDBACK")
F.Data.Dictionary.Close("dictTemp")

'check results
F.Data.DataView.Create("dtOrders", "dvOrderCustomerCheck", 22, "CUSTOMER_EXISTS = False and Failed = False and FINAL_CUSTOMER_NAME is not null and FINAL_CUSTOMER_NAME <> '' and UPLOADED_CUSTOMER = ''", "")
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtOrders!dvOrderCustomerCheck.RowCount--, 1)
	F.Intrinsic.String.Build("The order upload failed because the customer does not exist and the customer upload failed with message [{0}].", V.DataView.dtOrders!dvOrderCustomerCheck(V.Local.iCounter).CUSTOMER_FEEDBACK!FieldValTrim, V.Local.sMessage)
	F.Data.DataView.SetValue("dtOrders", "dvOrderCustomerCheck", V.Local.iCounter, "Feedback", V.Local.sMessage, "FAILED", True)
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtOrders", "dvOrderCustomerCheck")

'log results
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtCustomers.RowCount--, 1)
	F.Intrinsic.Control.If(V.DataTable.dtCustomers(V.Local.iCounter).UPLOADED_CUSTOMER!FieldValTrim, =, "")
	
		F.Intrinsic.String.Build("Attempted upload of external customer {0} for external order {1} failed with message [{2}].", V.DataTable.dtCustomers(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.DataTable.dtCustomers(V.Local.iCounter).Order_No_External!FieldValTrim, V.DataTable.dtCustomers(V.Local.iCounter).CUSTOMER_FEEDBACK!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.Math.Add(V.Global.iCustomersFailed, 1, V.Global.iCustomersFailed)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Successful upload of customer {0} from external customer {1} for external order {2}.", V.DataTable.dtCustomers(V.Local.iCounter).UPLOADED_CUSTOMER!FieldValTrim, V.DataTable.dtCustomers(V.Local.iCounter).Ext_CustomerNo!FieldValTrim, V.DataTable.dtCustomers(V.Local.iCounter).Order_No_External!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.Math.Add(V.Global.iCustomersUploaded, 1, V.Global.iCustomersUploaded)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataTable.Close("dtCustomers")

F.Intrinsic.String.Build("Customer processing from orders completed. {0} uploaded, {1} failed.", V.Global.iCustomersUploaded, V.Global.iCustomersFailed, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UploadCustomers.End

Program.Sub.UploadContacts.Start
'run contact uploader
'check if successful

F.Intrinsic.Control.Try

V.Local.sSplit.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sPath.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sMap.Declare(String, "TRIMMED_CONTACT_KEY@!@EXTERNAL_CONTACT_ID*!*FINAL_CUSTOMER@!@GSS_COMPANY_ID*!*SHIPTOCONTACTNAME@!@FULL_NAME*!*LAST_NAME@!@LAST_NAME*!*SHIPTOCONTACTEMAIL@!@EMAIL*!*SHIPTOCONTACTPHONE@!@PHONE*!*SHIPTOADDRESS1@!@SHIP_ADDRESS_1*!*SHIPTOADDRESS2@!@SHIP_ADDRESS_2*!*SHIPTOADDRESS3@!@SHIP_ADDRESS_3*!*SHIPTOADDRESS4@!@SHIP_ADDRESS_4*!*SHIPTOADDRESS5@!@SHIP_ADDRESS_5*!*TRIMMED_SHIPTOCITY@!@SHIP_CITY*!*SHIPTOSTATE@!@SHIP_STATE*!*SHIPTOZIP@!@SHIP_ZIP*!*SHIPTOCOUNTRY@!@SHIP_COUNTRY*!*SHIPTOID@!@SHIP_TO_ID*!*BILLTOADDRESS1@!@ADDRESS_1*!*BILLTOADDRESS2@!@ADDRESS_2*!*BILLTOADDRESS3@!@ADDRESS_3*!*BILLTOADDRESS4@!@ADDRESS_4*!*BILLTOADDRESS5@!@ADDRESS_5*!*TRIMMED_BILLTOCITY@!@CITY*!*BILLTOSTATE@!@STATE*!*BILLTOZIP@!@ZIP*!*BILLTOCOUNTRY@!@COUNTRY*!*RECORD_TIMESTAMP@!@RECORD_TIMESTAMP*!*FIRST_NAME@!@FIRST_NAME")

'get distinct list of contacts
F.Data.DataTable.AddExpressionColumn("dtOrders", "CONTACT_KEY", "String", "TRIM(FINAL_CUSTOMER) + TRIM(SHIPTOCONTACTNAME)")
F.Data.DataView.ToDataTableDistinct("dtOrders", "dvCheck", "dtContactsFull", "CONTACT_KEY*!*SHIPTOCONTACTNAME*!*FINAL_CUSTOMER*!*SHIPTOCONTACTEMAIL*!*SHIPTOCONTACTPHONE*!*SHIPTOID*!*SHIPTOADDRESS1*!*SHIPTOADDRESS2*!*SHIPTOADDRESS3*!*SHIPTOADDRESS4*!*SHIPTOADDRESS5*!*SHIPTOCITY*!*SHIPTOSTATE*!*SHIPTOZIP*!*SHIPTOCOUNTRY*!*BILLTOADDRESS1*!*BILLTOADDRESS2*!*BILLTOADDRESS3*!*BILLTOADDRESS4*!*BILLTOADDRESS5*!*BILLTOCITY*!*BILLTOSTATE*!*BILLTOZIP*!*BILLTOCOUNTRY")
F.Intrinsic.String.Build("{0} Contacts found to be created...", V.DataTable.dtContactsFull.RowCount, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

F.Data.DataTable.RemoveColumn("dtOrders", "CONTACT_KEY")

'F.Data.DataTable.AddColumn("dtContactsFull", "PRIMARY_CONTACT", Boolean, True)
F.Data.DataTable.AddColumn("dtContactsFull", "RECORD_TIMESTAMP", Date, V.Ambient.Now)

'split last name out
F.Data.DataTable.AddColumn("dtContactsFull", "LAST_NAME", "String", "")
F.Data.DataTable.AddColumn("dtContactsFull", "FIRST_NAME", "String", "")
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtContactsFull.RowCount--, 1)
	F.Intrinsic.String.Split(V.DataTable.dtContactsFull(V.Local.iCounter).SHIPTOCONTACTNAME!FieldValTrim, " ", V.Local.sSplit)
	F.Data.DataTable.SetValue("dtContactsFull", V.Local.iCounter, "LAST_NAME", V.Local.sSplit(V.Local.sSplit.UBound), "FIRST_NAME", V.Local.sSplit(0))
F.Intrinsic.Control.Next(V.Local.iCounter)

'now save these to the contact staging table
F.Intrinsic.Control.CallSub(Connection, "Connect", True)

F.Data.DataTable.AddExpressionColumn("dtContactsFull", "TRIMMED_CONTACT_KEY", "String", "Substring([CONTACT_KEY], 1, 30)")
F.Data.DataTable.AddExpressionColumn("dtContactsFull", "TRIMMED_BILLTOCITY", "String", "Substring([BILLTOCITY], 1, 15)")
F.Data.DataTable.AddExpressionColumn("dtContactsFull", "TRIMMED_SHIPTOCITY", "String", "Substring([SHIPTOCITY], 1, 15)")

F.Data.DataTable.SaveToDB("dtContactsFull", "Con", "GCG_5807_CNTCT_STAGE", "CONTACT_KEY", 128, V.Local.sMap)

'now run the upload
F.Intrinsic.Control.CallSub(AddLog, "Message", "Running contact uploader...")
F.Global.General.SetPassedDataElement("FROM_ORDER", True)
F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Global.sContactUploaderScript, V.Local.sPath)
F.Global.General.CallSyncGAS(V.Local.sPath, V.Caller.Switches)
F.Global.General.ResetPassedDataElements
F.Intrinsic.Control.CallSub(AddLog, "Message", "Contact Uploader processing complete.")
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

'not worth failing the order if this fails

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UploadContacts.End

Program.Sub.Exit.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtOrders.Exists)
	F.Data.DataTable.Close("dtOrders")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtFields.Exists)
	F.Data.DataTable.Close("dtFields")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.If(V.Global.sCallingProgram.Trim, =, "GCG_5807_OrderUploaderWatchdog.g2u")
	F.Intrinsic.Control.CallSub(SendIPMMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bClearLock)
	F.Intrinsic.Control.CallSub(ClearLock)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bWaitMessage)
	F.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.Exit.End

Program.Sub.ClearLock.Start
F.Intrinsic.Control.Try

F.Global.Registry.AddValue("", V.Caller.CompanyCode, "GCG_5807_OrderUploader.g2u", V.Global.sProject, 0, False, "", False, -1, 0, V.Ambient.Date, V.Ambient.Now, "")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.ClearLock.End

Program.Sub.GetPartAndRev.Start
'pass FULL_PART
'returns PART and REV

F.Intrinsic.Control.Try

V.Local.sPart.Declare(String)
V.Local.sRev.Declare(String)
V.Local.iLength.Declare(Long)

V.Local.sPart.Set(V.Args.FULL_PART.Trim)
F.Intrinsic.Control.If(V.Local.sPart.Length, >, 17)
	F.Intrinsic.Math.Sub(V.Local.sPart.Length, 17, V.Local.iLength)
	F.Intrinsic.String.Right(V.Local.sPart, V.Local.iLength, V.Local.sRev)
	V.Local.sPart.Set(V.Local.sPart.Left17)
F.Intrinsic.Control.Else
	V.Local.sReV.Set("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("PART", V.Local.sPart)
F.Intrinsic.Variable.AddRV("REV", V.Local.sRev)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.GetPartAndRev.End

Program.Sub.GetNextOrderNumber.Start
'get the next sales order number, stored in three places. Take the max and then check for duplicates

F.Intrinsic.Control.Try

V.Local.sOrder.Declare(String)
V.Local.sOrder2.Declare(String)
V.Local.sOrder3.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.bDone.Declare(Boolean, False)
V.Local.sMessage.Declare(String)
V.Local.iReturn.Declare(Long)

F.Global.General.ReadOption(400358, 2, "", 0, V.Local.sOrder)
F.Global.General.ReadOption(402499, 3, "", 0, V.Local.sOrder2)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", "select RTRIM(LAST_PO_NUM) from LAST_PO where ASS_SYS = 'ORD' and ASS_SUB_SYS = 'NUM'")
F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(LAST_PO_NUM) from LAST_PO where ASS_SYS = 'ORD' and ASS_SUB_SYS = 'NUM'", V.Local.sOrder3)

F.Intrinsic.Control.If(V.Local.sOrder2.Long, >, V.Local.sOrder.Long)
	V.Local.sOrder.Set(V.Local.sOrder2)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sOrder3.Long, >, V.Local.sOrder.Long)
	V.Local.sOrder.Set(V.Local.sOrder3)
F.Intrinsic.Control.EndIf

'make sure no duplicates
F.Intrinsic.Control.DoUntil(V.Local.bDone)
	'generate quote number
	F.Intrinsic.String.LPad(V.Local.sOrder.++, "0", 7, V.Local.sOrder)
	
	'check if it already exists in order header
	F.Intrinsic.String.Build("select RTRIM(ORDER_NO) ORDER_NO from V_ORDER_HEADER where ORDER_NO = '{0}'", V.Local.sOrder, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		
		'check if it already exists in order history
		F.Intrinsic.String.Build("select RTRIM(ORDER_NO) ORDER_NO from V_ORDER_HIST_HEAD where ORDER_NO = '{0}'", V.Local.sOrder, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		
			'check if it is locked
			F.Global.General.ReadSoftLock("SO", V.Local.sOrder, V.Local.iReturn)
			F.Intrinsic.Control.If(V.Local.iReturn, =, 0)
				V.Local.bDone.Set(True)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Loop
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.String.Build("GetNextOrderNumber returning order number {0}", V.Local.sOrder, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("NEXT_ORDER", V.Local.sOrder)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.GetNextOrderNumber.End

Program.Sub.GetNextQuoteNumber.Start
'grab the next quote number from options

F.Intrinsic.Control.Try

V.Local.sQuote.Declare(String)
V.Local.bDone.Declare(Boolean, False)
V.Local.iLastQuote.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iReturn.Declare(Long)

F.Global.General.ReadOption(401312, 3, "", 0, V.Local.sQuote)
F.Intrinsic.Math.Add(V.Local.sQuote, 1, V.Local.iLastQuote)

'make sure no duplicates
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.DoUntil(V.Local.bDone)
	'generate quote number
	F.Intrinsic.String.LPad(V.Local.iLastQuote, "0", 7, V.Local.sQuote)
	
	'check if it exists in quote header
	F.Intrinsic.String.Build("select RTRIM(QUOTE_NO) QUOTE_NO from V_QUOTE_HEADER where QUOTE_NO = '{0}'", V.Local.sQuote, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		'check if it's locked
		F.Global.General.ReadSoftLock("QT", V.Local.sQuote, V.Local.iReturn)
		F.Intrinsic.Control.If(V.Local.iReturn, =, 0)
			V.Local.bDone.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Local.iLastQuote, 1, V.Local.iLastQuote)
F.Intrinsic.Control.Loop
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.If(V.Global.bExtendedLogging)
	F.Intrinsic.String.Build("GetNextQuoteNumber returning quote number {0}", V.Local.sQuote, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("QUOTE", V.Local.sQuote)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.GetNextQuoteNumber.End

Program.Sub.UpdateLastQuoteNumber.Start
'save last quote number back to database

F.Intrinsic.Control.Try

F.Global.General.SaveOption(401312, 0, "", "", "", "", "", "", V.Args.LAST_QUOTE.Long)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UpdateLastQuoteNumber.End

Program.Sub.UpdateLastOrderNumber.Start
'save the last order number back for future

F.Intrinsic.Control.Try

V.Local.sOrder.Declare(String)
V.Local.sSQL.Declare(String)

F.Global.General.SaveOption(400358, 0, "", "", "", "", V.Args.LAST_ORDER.Long, "", "")
F.Global.General.SaveOption(402499, 0, "", "", "", "", "", "", V.Args.LAST_ORDER.Long)

F.Intrinsic.String.LPad(V.Args.Last_Order, "0", 7, V.Local.sOrder)
F.Intrinsic.String.Build("update LAST_PO set LAST_PO_NUM = '{0}' where ASS_SYS = 'ORD' and ASS_SUB_SYS = 'NUM'", V.Local.sOrder, V.Local.sSQL)
F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.UpdateLastOrderNumber.End

Program.Sub.GetORDUPLErrorMessage.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sMessage.Declare(String, "Unspecified error occured.")
V.Local.bExists.Declare(Boolean)
V.Local.sFilter.Declare(String)
V.Local.sUploadFile.Declare(String)

'read in the ORDUPL error log
F.Intrinsic.String.Build("{0}\ORDUP{1}.ERR", V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sPath, V.Local.sContents)
	
	'clean it up a bit
	F.Intrinsic.String.RegExReplace(V.Local.sContents, " {2,}", " ", True, True, V.Local.sContents)
	F.Intrinsic.String.RegExReplace(V.Local.sContents, "\| +", "|", True, True, V.Local.sContents)
	F.Data.DataTable.CreateFromString("dtOrduplError", V.Local.sContents, "Message_1*!*Message_2*!*Date*!*Time*!*File", "String*!*String*!*String*!*String*!*String", "|", V.Ambient.NewLine)
	
	'make sure it has data
	F.Intrinsic.Control.If(V.DataTable.dtOrduplError.RowCount, >, 0)
		'delete blank last row
		F.Data.DataTable.DeleteRow("dtOrduplError",V.DataTable.dtOrduplError.RowCount--)
		
		'check for error message
		V.Local.sUploadFile.Set(V.DataTable.dtOrduplError(V.DataTable.dtOrduplError.RowCount--).FILE!FieldValTrim)
		F.Intrinsic.String.Build("File = '{0}' and Message_1 not in ('Program: ORDUPL Message: Success Message', 'Program: ORDUP1  Message: Order error')", V.Local.sUploadFile, V.Local.sFilter)
		F.Data.DataView.Create("dtOrduplError", "dvORDUPLError", 22, V.Local.sFilter, "")
		
		'get error message(s)
		F.Intrinsic.Control.If(V.DataView.dtOrduplError!dvORDUPLError.RowCount, >, 0)
			F.Data.DataView.ToString("dtOrduplError", "dvORDUPLError", "Message_2", "***NODELIMITER***", V.Ambient.NewLine, V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Close("dtOrduplError", "dvORDUPLError")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtOrduplError")
F.Intrinsic.Control.EndIf

'replace with some more user friendly error messages
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0400 Pgm=ORDUP3 GL Account Required, GL Account Missing!", "GL Account not found. Make sure the part exists, has a valid product line, and the product line has a valid GL account, or the customer has an associated GL account, or there is a default sales GL account set up.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 1 Field Required", "Header User field 1 is required because the option to make it required is on. Make sure a User Field 1 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 2 Field Required", "Header User field 2 is required because the option to make it required is on. Make sure a User Field 2 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 3 Field Required", "Header User field 3 is required because the option to make it required is on. Make sure a User Field 3 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 4 Field Required", "Header User field 4 is required because the option to make it required is on. Make sure a User Field 4 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 5 Field Required", "Header User field 5 is required because the option to make it required is on. Make sure a User Field 5 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0410 Pgm=ORDUP3User 1 Field Required", "Line User field 1 is required because the option to make it required is on. Make sure a User Field 1 is being passed for the order line.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0410 Pgm=ORDUP3User 2 Field Required", "Line User field 2 is required because the option to make it required is on. Make sure a User Field 2 is being passed for the order line.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0410 Pgm=ORDUP3User 3 Field Required", "Line User field 3 is required because the option to make it required is on. Make sure a User Field 3 is being passed for the order line.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0410 Pgm=ORDUP3User 4 Field Required", "Line User field 4 is required because the option to make it required is on. Make sure a User Field 4 is being passed for the order line.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0410 Pgm=ORDUP3User 5 Field Required", "Line User field 5 is required because the option to make it required is on. Make sure a User Field 5 is being passed for the order line.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0820 Pgm=ORDUP2Duplicate Order Number", "This order number already exists.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0220 Pgm=ORDUP2 Customer is on Credit Hold:", "This customer is on Credit Hold:", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0230 Pgm=ORDUP1Invalid Line Order Date Must be CCYYMMDD", "Invalid Line Order Date Format. If the date was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0230 Pgm=ORDUP1Invalid Promise Order Date Must be CCYYMMDD", "Invalid Line Promise Date Format. If the date was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Invalid Transaction, must be O(der), Q(uote)", "Invalid Transaction Code. Only O for Order and Q for Quote are accepted. If the transaction code was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Missing Part Number", "No Part number passed. If the part number was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Invalid Prospect, not found", "This customer/prospect does not exist.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0210 Pgm=ORDUP1Invalid Customer, not found ", "This customer does not exist.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0800 Pgm=ORDUP2Duplicate Quote Number", "This quote number already exists.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR:   Par=0200 Pgm=ORDUP1Upload File is Empty or Doesn't Exist", "Error processing upload file. Make sure the Web Importer parameters are set correctly in Order Entry > Administration > Uploader Settings [5807] > Advanced > Web Importer.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par= Pgm=ORDUP1Invalid Ship To, not found", "Invalid Ship To ID. If a valid Ship To ID was passed, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)

'maybe add
'would have to do some of these differently because they have details in them, so a blind replace wouldn't work
'some of these I should be catching before they get to the WI 
'ERROR:   Par= Pgm=ORDUP1Invalid Ship To, not found
'ERROR:   Par=0220 Pgm=ORDUP2 Customer is on Credit Hold:  WOL000 
'ERROR:   Par=0310 Pgm=ORDUP2Auto Order Option Off, Must Pass Order No
'ERROR:   Par=0818 Pgm=ORDUP3Error Writing the Line Record:  0000897001000
'ERROR:   Par=0210 Pgm=ORDUP1Missing Prospect or Customer NBR

F.Intrinsic.Variable.AddRV("ORDUPL_UPLOAD_FILE", V.Local.sUploadFile)
F.Intrinsic.Variable.AddRV("ORDUPL_ERROR", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.GetORDUPLErrorMessage.End

Program.Sub.SendIPMMessage.Start
F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

'return counts to PID passed in switch
F.Intrinsic.String.Build("ORDERS{0}{1}{0}{2}{0}{3}", "!@@!", V.Global.iUploaded, V.Global.iUpdated, V.Global.iFailed, V.Local.sMessage)
F.Intrinsic.IPM.SendMessage(V.Local.sMessage, V.Caller.Switches)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.SendIPMMessage.End

Program.Sub.PostProcessing.Start
'here check any extra options for post processing

F.Intrinsic.Control.Try

V.Local.sScript.Declare(String)
V.Local.sPassed.Declare(String)
V.Local.sMessage.Declare(String)

'JustRite Manufacturing sales order creation
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "ADVANCED", "NAME", "JRM_ORDER_CREATION")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Data.DataView.Create("dtOrders", "dvUploaded", 22, "Failed = False and Processed = True and TransactionCode = 'Q'", "")
		F.Intrinsic.Control.If(V.DataView.dtOrders!dvUploaded.RowCount, >, 0)

			F.Data.DataView.ToDataTableDistinct("dtOrders", "dvUploaded", "dtJRMOrders", "OrderNumber*!*Update_Order")
			F.Data.DataView.Create("dtJRMOrders", "dvJRMOrdersString", 22)		
			F.Data.DataView.ToString("dtJRMOrders", "dvJRMOrdersString", "OrderNumber*!*Update_Order", "##", "::", V.Local.sPassed)
			F.Data.DataView.Close("dtJRMOrders", "dvJRMOrdersString")
			F.Data.DataTable.Close("dtJRMOrders")
			
			F.Intrinsic.String.Build("Running advanced option JRM quote to sales order script [GCG_5807_OrderFromQuoteJRM.g2u] to generate/update sales orders from the created quotes. Passing quote list [{0}].", V.Local.sPassed, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)
			
			F.Global.General.SetPassedDataElement("QUOTES", V.Local.sPassed)
			F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Global.sOrderFromQuoteJRMScript, V.Local.sScript)
			F.Global.General.CallSyncGAS(V.Local.sScript, V.Caller.Switches)
			F.Global.General.ResetPassedDataElements
			F.Intrinsic.Control.CallSub(AddLog, "Message", "Advanced option JRM quote to sales order script [GCG_5807_OrderFromQuoteJRM.g2u] processing completed. Check JRM_Quote_to_Sales_Order.txt for details.")
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Close("dtOrders", "dvUploaded")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.PostProcessing.End

Program.Sub.DeleteOrder.Start
'deletes a given sales order
'pass ORDER
'returns DELETION_RESULT

F.Intrinsic.Control.Try

V.Local.sOrder.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sMessage.Declare(String)

F.Intrinsic.String.LPad(V.Args.Order.Trim, "0", 7, V.Local.sOrder)
F.Intrinsic.String.Build("Deleting order {0} via callwrapper Sales.DeleteSalesOrder...", V.Local.sOrder, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

F.Global.Callwrapper.New("DeleteSalesOrder", "Sales.DeleteSalesOrder")
F.Global.Callwrapper.SetProperty("DeleteSalesOrder", "SalesOrderNumber", V.Local.sOrder)
F.Global.Callwrapper.Run("DeleteSalesOrder")

F.Global.CallWrapper.GetProperty("DeleteSalesOrder", "Status", V.Local.sStatus)

F.Intrinsic.Variable.AddRV("DELETION_RESULT", V.Local.sStatus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.DeleteOrder.End

Program.Sub.DeleteQuote.Start
F.Intrinsic.Control.Try

V.Local.sQuote.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sTables.Declare(String)
V.Local.sKeys.Declare(String)

'quote tables
'--QORDRPLA--
'QUOTE_BILL_TO
'QUOTE_HEADER
'QUOTE_LINES
'QUOTE_SHIP_TO

'QUOTE_SHIP_SCHED
'SHIP_SCHED_Q
'CONFIG_QTE_INSERT
'CONFIG_QUOTE
'QT_CONFIG_NOTES
'QUOTE_CONFIG
'QUOTE_TAX
'QUOTE_LN_TEXT
'QUOTE_HF_TEXT
'QTE_HD_NOTE
'QTE_LN_NOTE

'leaving anything not created by the upload for now
F.Intrinsic.String.Split("QUOTE_HEADER*!*QUOTE_HF_TEXT*!*QUOTE_LN_TEXT", "*!*", V.Local.sTables)
F.Intrinsic.String.Split("QUOTE_NO*!*QUOTE_NO*!*QUOTE_NUMBER", "*!*", V.Local.sKeys)

F.Intrinsic.String.LPad(V.Args.Quote.Trim, "0", 7, V.Local.sQuote)
F.Intrinsic.String.Build("Deleting quote {0} via SQL...", V.Local.sQuote, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Message", V.Local.sMessage)

'loop through the tables set above and delete from them
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sTables.UBound, 1)
	F.Intrinsic.String.Build("delete from {0} where {1} = '{2}'", V.Local.sTables(V.Local.iCounter), V.Local.sKeys(V.Local.iCounter), V.Local.sQuote, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage)
F.Intrinsic.Control.EndTry
Program.Sub.DeleteQuote.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$rseddon$}$20240308152532744$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbriRczReGg9nn0heT3nfGhR/KR5QzbgQLAEclhQN6LYw=
Program.Sub.Comments.End